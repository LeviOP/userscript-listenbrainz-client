// Generated by quicktype
export interface YtInitialData {
    responseContext:              ResponseContext;
    contents:                     Contents;
    currentVideoEndpoint?:        CurrentVideoEndpoint;
    trackingParams:               string;
    playerOverlays?:              PlayerOverlays;
    onResponseReceivedEndpoints?: OnResponseReceivedEndpoint[];
    engagementPanels?:            EngagementPanel[];
    topbar:                       Topbar;
    pageVisualEffects?:           PageVisualEffect[];
    frameworkUpdates?:            FrameworkUpdates;
    header?:                      YtInitialDataHeader;
    metadata?:                    Metadata;
    microformat?:                 Microformat;
    sidebar?:                     Sidebar;
    onResponseReceivedActions?:   OnResponseReceivedAction[];
}

export interface Contents {
    twoColumnWatchNextResults?:      TwoColumnWatchNextResults;
    twoColumnBrowseResultsRenderer?: TwoColumnBrowseResultsRenderer;
}

export interface TwoColumnBrowseResultsRenderer {
    tabs: Tab[];
}

export interface Tab {
    tabRenderer: TabRenderer;
}

export interface TabRenderer {
    selected:       boolean;
    content:        TabRendererContent;
    trackingParams: string;
    tabIdentifier?: string;
}

export interface TabRendererContent {
    sectionListRenderer?: PurpleSectionListRenderer;
    richGridRenderer?:    RichGridRenderer;
}

export interface RichGridRenderer {
    contents:       RichGridRendererContent[];
    trackingParams: string;
    header?:        RichGridRendererHeader;
    targetId:       string;
    masthead?:      Masthead;
    reflowOptions:  ReflowOptions;
}

export interface RichGridRendererContent {
    richItemRenderer?:         PurpleRichItemRenderer;
    richSectionRenderer?:      RichSectionRenderer;
    continuationItemRenderer?: PurpleContinuationItemRenderer;
}

export interface PurpleContinuationItemRenderer {
    trigger:              Trigger;
    continuationEndpoint: PurpleContinuationEndpoint;
    ghostCards:           GhostCards;
}

export interface PurpleContinuationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    continuationCommand: ContinuationEndpointContinuationCommand;
}

export interface ContinuationEndpointCommandMetadata {
    webCommandMetadata: PurpleWebCommandMetadata;
}

export interface PurpleWebCommandMetadata {
    sendPost: boolean;
    apiUrl?:  APIURL;
}

export enum APIURL {
    YoutubeiV1AccountAccountMenu = "/youtubei/v1/account/account_menu",
    YoutubeiV1AccountSetSetting = "/youtubei/v1/account/set_setting",
    YoutubeiV1BackstageCreatePost = "/youtubei/v1/backstage/create_post",
    YoutubeiV1Browse = "/youtubei/v1/browse",
    YoutubeiV1BrowseEditPlaylist = "/youtubei/v1/browse/edit_playlist",
    YoutubeiV1Feedback = "/youtubei/v1/feedback",
    YoutubeiV1FlagFlag = "/youtubei/v1/flag/flag",
    YoutubeiV1FlagGetForm = "/youtubei/v1/flag/get_form",
    YoutubeiV1GetSurvey = "/youtubei/v1/get_survey",
    YoutubeiV1GetTranscript = "/youtubei/v1/get_transcript",
    YoutubeiV1LikeDislike = "/youtubei/v1/like/dislike",
    YoutubeiV1LikeLike = "/youtubei/v1/like/like",
    YoutubeiV1LikeRemovelike = "/youtubei/v1/like/removelike",
    YoutubeiV1Next = "/youtubei/v1/next",
    YoutubeiV1NotificationAddUpcomingEventReminder = "/youtubei/v1/notification/add_upcoming_event_reminder",
    YoutubeiV1NotificationGetNotificationMenu = "/youtubei/v1/notification/get_notification_menu",
    YoutubeiV1NotificationGetUnseenCount = "/youtubei/v1/notification/get_unseen_count",
    YoutubeiV1NotificationModifyChannelPreference = "/youtubei/v1/notification/modify_channel_preference",
    YoutubeiV1NotificationRemoveUpcomingEventReminder = "/youtubei/v1/notification/remove_upcoming_event_reminder",
    YoutubeiV1PdgGetPdgBuyFlow = "/youtubei/v1/pdg/get_pdg_buy_flow",
    YoutubeiV1PlaylistCreate = "/youtubei/v1/playlist/create",
    YoutubeiV1PlaylistGetAddToPlaylist = "/youtubei/v1/playlist/get_add_to_playlist",
    YoutubeiV1ShareGetSharePanel = "/youtubei/v1/share/get_share_panel",
    YoutubeiV1SubscriptionSubscribe = "/youtubei/v1/subscription/subscribe",
    YoutubeiV1SubscriptionUnsubscribe = "/youtubei/v1/subscription/unsubscribe",
    YoutubeiV1UpdatedMetadata = "/youtubei/v1/updated_metadata",
}

export interface ContinuationEndpointContinuationCommand {
    token:   string;
    request: Request;
}

export enum Request {
    ContinuationRequestTypeBrowse = "CONTINUATION_REQUEST_TYPE_BROWSE",
    ContinuationRequestTypeWatchNext = "CONTINUATION_REQUEST_TYPE_WATCH_NEXT",
}

export interface GhostCards {
    ghostGridRenderer: GhostGridRenderer;
}

export interface GhostGridRenderer {
    rows: number;
}

export enum Trigger {
    ContinuationTriggerOnItemShown = "CONTINUATION_TRIGGER_ON_ITEM_SHOWN",
}

export interface PurpleRichItemRenderer {
    content:        PurpleContent;
    trackingParams: string;
    rowIndex:       number;
    colIndex:       number;
}

export interface PurpleContent {
    videoRenderer: PurpleVideoRenderer;
}

export interface PurpleVideoRenderer {
    videoId:                            string;
    thumbnail:                          BackgroundElement;
    title:                              VideoRendererTitle;
    descriptionSnippet?:                TitleElement;
    longBylineText:                     LongBylineText;
    publishedTimeText:                  Subtitle;
    lengthText:                         ShortViewCountText;
    viewCountText:                      Subtitle;
    navigationEndpoint:                 OnTap;
    ownerText:                          LongBylineText;
    shortBylineText:                    LongBylineText;
    trackingParams:                     string;
    showActionMenu:                     boolean;
    shortViewCountText:                 ShortViewCountText;
    menu:                               CompactVideoRendererMenu;
    channelThumbnailSupportedRenderers: PurpleChannelThumbnailSupportedRenderers;
    thumbnailOverlays:                  PurpleThumbnailOverlay[];
    inlinePlaybackEndpoint:             InlinePlaybackEndpointClass;
    owner:                              PurpleOwner;
    richThumbnail?:                     RichThumbnail;
    ownerBadges?:                       OwnerBadgeElement[];
    isWatched?:                         boolean;
}

export interface PurpleChannelThumbnailSupportedRenderers {
    channelThumbnailWithLinkRenderer: PurpleOwner;
}

export interface PurpleOwner {
    thumbnail:          BackgroundElement;
    navigationEndpoint: OwnerNavigationEndpoint;
    accessibility:      ToggledAccessibilityDataClass;
    title:              string;
}

export interface ToggledAccessibilityDataClass {
    accessibilityData: AccessibilityAccessibility;
}

export interface AccessibilityAccessibility {
    label: string;
}

export interface OwnerNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    browseEndpoint:      ChannelNavigationEndpointBrowseEndpoint;
}

export interface ChannelNavigationEndpointBrowseEndpoint {
    browseId:          string;
    canonicalBaseUrl?: string;
}

export interface InlinePlaybackEndpointCommandMetadata {
    webCommandMetadata: FluffyWebCommandMetadata;
}

export interface FluffyWebCommandMetadata {
    url:         string;
    webPageType: WebPageType;
    rootVe:      number;
    apiUrl?:     APIURL;
}

export enum WebPageType {
    WebPageTypeBrowse = "WEB_PAGE_TYPE_BROWSE",
    WebPageTypeChannel = "WEB_PAGE_TYPE_CHANNEL",
    WebPageTypePlaylist = "WEB_PAGE_TYPE_PLAYLIST",
    WebPageTypeSearch = "WEB_PAGE_TYPE_SEARCH",
    WebPageTypeShorts = "WEB_PAGE_TYPE_SHORTS",
    WebPageTypeUnknown = "WEB_PAGE_TYPE_UNKNOWN",
    WebPageTypeWatch = "WEB_PAGE_TYPE_WATCH",
}

export interface BackgroundElement {
    thumbnails: SourceElement[];
}

export interface SourceElement {
    url:    string;
    width:  number;
    height: number;
}

export interface TitleElement {
    runs: NumVideosTextRun[];
}

export interface NumVideosTextRun {
    text: string;
}

export interface InlinePlaybackEndpointClass {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    watchEndpoint:       InlinePlaybackEndpointWatchEndpoint;
}

export interface InlinePlaybackEndpointWatchEndpoint {
    videoId:                            string;
    playerParams:                       string;
    playerExtraUrlParams?:              Param[];
    watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
    startTimeSeconds?:                  number;
}

export interface Param {
    key:   string;
    value: string;
}

export interface WatchEndpointSupportedOnesieConfig {
    html5PlaybackOnesieConfig: Html5PlaybackOnesieConfig;
}

export interface Html5PlaybackOnesieConfig {
    commonConfig: CommonConfig;
}

export interface CommonConfig {
    url: string;
}

export interface ShortViewCountText {
    accessibility: ToggledAccessibilityDataClass;
    simpleText:    string;
}

export interface LongBylineText {
    runs: LongBylineTextRun[];
}

export interface LongBylineTextRun {
    text:                string;
    navigationEndpoint?: ChannelNavigationEndpointClass;
}

export interface ChannelNavigationEndpointClass {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    browseEndpoint:      ChannelNavigationEndpointBrowseEndpoint;
    loggingUrls?:        LoggingURL[];
}

export interface LoggingURL {
    baseUrl: string;
}

export interface CompactVideoRendererMenu {
    menuRenderer: MenuRenderer;
}

export interface MenuRenderer {
    items?:         SortFilterSubMenuRendererItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
    targetId?:      TargetID;
    subMenuItems?:  MenuRendererSubMenuItem[];
}

export interface SortFilterSubMenuRendererItem {
    menuServiceItemRenderer?:         PurpleMenuServiceItemRenderer;
    menuServiceItemDownloadRenderer?: ItemMenuServiceItemDownloadRenderer;
}

export interface ItemMenuServiceItemDownloadRenderer {
    serviceEndpoint: PurpleServiceEndpoint;
    trackingParams:  string;
}

export interface PurpleServiceEndpoint {
    clickTrackingParams:  string;
    offlineVideoEndpoint: PurpleOfflineVideoEndpoint;
}

export interface PurpleOfflineVideoEndpoint {
    videoId:      string;
    onAddCommand: PurpleOnAddCommand;
}

export interface PurpleOnAddCommand {
    clickTrackingParams:      string;
    getDownloadActionCommand: PurpleGetDownloadActionCommand;
}

export interface PurpleGetDownloadActionCommand {
    videoId: string;
    params:  string;
}

export interface PurpleMenuServiceItemRenderer {
    text:            TitleElement;
    icon:            Icon;
    serviceEndpoint: FluffyServiceEndpoint;
    trackingParams:  string;
    hasSeparator?:   boolean;
}

export interface Icon {
    iconType: IconType;
}

export enum IconType {
    AccessTime = "ACCESS_TIME",
    AccountBox = "ACCOUNT_BOX",
    AddToQueueTail = "ADD_TO_QUEUE_TAIL",
    AvatarLoggedOut = "AVATAR_LOGGED_OUT",
    Check = "CHECK",
    CheckCircleThick = "CHECK_CIRCLE_THICK",
    ChevronLeft = "CHEVRON_LEFT",
    ChevronRight = "CHEVRON_RIGHT",
    Close = "CLOSE",
    Collapse = "COLLAPSE",
    ContentCut = "CONTENT_CUT",
    CreationLive = "CREATION_LIVE",
    CreationPost = "CREATION_POST",
    CreationUpload = "CREATION_UPLOAD",
    Dislike = "DISLIKE",
    Dismissal = "DISMISSAL",
    Expand = "EXPAND",
    ExpandMore = "EXPAND_MORE",
    ExternalLink = "EXTERNAL_LINK",
    Feedback = "FEEDBACK",
    Flag = "FLAG",
    Info = "INFO",
    LibraryAdd = "LIBRARY_ADD",
    LibraryRemove = "LIBRARY_REMOVE",
    Like = "LIKE",
    Live = "LIVE",
    Loop = "LOOP",
    LoopActive = "LOOP_ACTIVE",
    LoopOneActive = "LOOP_ONE_ACTIVE",
    MicrophoneOn = "MICROPHONE_ON",
    MoneyHeart = "MONEY_HEART",
    MoreVert = "MORE_VERT",
    Music = "MUSIC",
    MyVideos = "MY_VIDEOS",
    NotInterested = "NOT_INTERESTED",
    Notifications = "NOTIFICATIONS",
    NotificationsActive = "NOTIFICATIONS_ACTIVE",
    NotificationsNone = "NOTIFICATIONS_NONE",
    NotificationsOff = "NOTIFICATIONS_OFF",
    OfficialArtistBadge = "OFFICIAL_ARTIST_BADGE",
    OpenInNew = "OPEN_IN_NEW",
    Person = "PERSON",
    PersonMinus = "PERSON_MINUS",
    PlayAll = "PLAY_ALL",
    PlayArrow = "PLAY_ARROW",
    PlaylistAdd = "PLAYLIST_ADD",
    PlaylistAddCheck = "PLAYLIST_ADD_CHECK",
    Playlists = "PLAYLISTS",
    PrivacyUnlisted = "PRIVACY_UNLISTED",
    Remove = "REMOVE",
    Search = "SEARCH",
    Share = "SHARE",
    Shuffle = "SHUFFLE",
    Sort = "SORT",
    VideoCall = "VIDEO_CALL",
    VolumeOff = "VOLUME_OFF",
    VolumeUp = "VOLUME_UP",
    WatchLater = "WATCH_LATER",
    YoutubeLogo = "YOUTUBE_LOGO",
    YoutubeShortsBrand24 = "YOUTUBE_SHORTS_BRAND_24",
}

export interface FluffyServiceEndpoint {
    clickTrackingParams:           string;
    commandMetadata:               ContinuationEndpointCommandMetadata;
    signalServiceEndpoint?:        PurpleSignalServiceEndpoint;
    playlistEditEndpoint?:         UntoggledServiceEndpointPlaylistEditEndpoint;
    addToPlaylistServiceEndpoint?: AddToPlaylistServiceEndpoint;
    shareEntityServiceEndpoint?:   ShareEntityServiceEndpoint;
    feedbackEndpoint?:             PurpleFeedbackEndpoint;
    getReportFormEndpoint?:        GetTranscriptEndpoint;
}

export interface AddToPlaylistServiceEndpoint {
    videoId: string;
}

export interface PurpleFeedbackEndpoint {
    feedbackToken: string;
    uiActions:     UIActions;
    actions:       PurpleAction[];
}

export interface PurpleAction {
    clickTrackingParams:    string;
    replaceEnclosingAction: PurpleReplaceEnclosingAction;
}

export interface PurpleReplaceEnclosingAction {
    item: PurpleItem;
}

export interface PurpleItem {
    notificationMultiActionRenderer: PurpleNotificationMultiActionRenderer;
}

export interface PurpleNotificationMultiActionRenderer {
    responseText:       ShortViewCountTextClass;
    buttons:            PurpleButton[];
    trackingParams:     string;
    dismissalViewStyle: DismissalViewStyle;
}

export interface PurpleButton {
    buttonRenderer: PurpleButtonRenderer;
}

export interface PurpleButtonRenderer {
    style:            StyleTypeEnum;
    text:             Stat;
    serviceEndpoint?: TentacledServiceEndpoint;
    trackingParams:   string;
    command?:         PromotedSparklesWebRendererCommand;
}

export interface PromotedSparklesWebRendererCommand {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    urlEndpoint:         CommandURLEndpoint;
    loggingUrls?:        LoggingURL[];
}

export interface CommandURLEndpoint {
    url:    string;
    target: TargetEnum;
}

export enum TargetEnum {
    TargetNewWindow = "TARGET_NEW_WINDOW",
}

export interface TentacledServiceEndpoint {
    clickTrackingParams:    string;
    commandMetadata:        ContinuationEndpointCommandMetadata;
    undoFeedbackEndpoint?:  UndoFeedbackEndpoint;
    signalServiceEndpoint?: CommandSignalServiceEndpoint;
}

export interface CommandSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: FluffyAction[];
}

export interface FluffyAction {
    clickTrackingParams: string;
    signalAction:        Signal;
}

export interface Signal {
    signal: SignalActionSignal;
}

export enum SignalActionSignal {
    ClosePopup = "CLOSE_POPUP",
    EnableChromeNotifications = "ENABLE_CHROME_NOTIFICATIONS",
    GetUnseenNotificationCount = "GET_UNSEEN_NOTIFICATION_COUNT",
    HistoryBack = "HISTORY_BACK",
    HistoryForward = "HISTORY_FORWARD",
    LiveControlRoom = "LIVE_CONTROL_ROOM",
    SkipNavigation = "SKIP_NAVIGATION",
    TellUsWhy = "TELL_US_WHY",
    ToggleTranscriptTimestamps = "TOGGLE_TRANSCRIPT_TIMESTAMPS",
}

export enum PurpleSignal {
    ClientSignal = "CLIENT_SIGNAL",
}

export interface UndoFeedbackEndpoint {
    undoToken: string;
    actions:   UndoFeedbackEndpointAction[];
}

export interface UndoFeedbackEndpointAction {
    clickTrackingParams: string;
    undoFeedbackAction:  AdsEngagementPanelContentRenderer;
}

export interface AdsEngagementPanelContentRenderer {
    hack: boolean;
}

export enum StyleTypeEnum {
    StyleBlueText = "STYLE_BLUE_TEXT",
    StyleCompactGray = "STYLE_COMPACT_GRAY",
    StyleDefault = "STYLE_DEFAULT",
    StyleDefaultActive = "STYLE_DEFAULT_ACTIVE",
    StyleGreyText = "STYLE_GREY_TEXT",
    StyleHomeFilter = "STYLE_HOME_FILTER",
    StyleLightText = "STYLE_LIGHT_TEXT",
    StyleMonoTonalOverlay = "STYLE_MONO_TONAL_OVERLAY",
    StyleOpacity = "STYLE_OPACITY",
    StyleRefreshToNovelChip = "STYLE_REFRESH_TO_NOVEL_CHIP",
    StyleText = "STYLE_TEXT",
}

export interface Stat {
    simpleText?: string;
    runs?:       NumVideosTextRun[];
}

export enum DismissalViewStyle {
    DismissalViewStyleCompactTall = "DISMISSAL_VIEW_STYLE_COMPACT_TALL",
}

export interface ShortViewCountTextClass {
    accessibility?: ToggledAccessibilityDataClass;
    simpleText?:    string;
    runs?:          NumVideosTextRun[];
}

export interface UIActions {
    hideEnclosingContainer: boolean;
}

export interface GetTranscriptEndpoint {
    params: string;
}

export interface UntoggledServiceEndpointPlaylistEditEndpoint {
    playlistId: PlaylistID;
    actions:    TentacledAction[];
}

export interface TentacledAction {
    addedVideoId: string;
    action:       Action3;
}

export enum Action3 {
    ActionAddVideo = "ACTION_ADD_VIDEO",
}

export enum PlaylistID {
    Wl = "WL",
}

export interface ShareEntityServiceEndpoint {
    serializedShareEntity: string;
    commands:              ShareEntityServiceEndpointCommand[];
}

export interface ShareEntityServiceEndpointCommand {
    clickTrackingParams: string;
    openPopupAction:     PurpleOpenPopupAction;
}

export interface PurpleOpenPopupAction {
    popup:     PurplePopup;
    popupType: PurplePopupType;
    beReused:  boolean;
}

export interface PurplePopup {
    unifiedSharePanelRenderer: UnifiedSharePanelRenderer;
}

export interface UnifiedSharePanelRenderer {
    trackingParams:     string;
    showLoadingSpinner: boolean;
}

export enum PurplePopupType {
    Dialog = "DIALOG",
}

export interface PurpleSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: StickyAction[];
}

export interface StickyAction {
    clickTrackingParams:   string;
    addToPlaylistCommand?: AddToPlaylistCommand;
    openPopupAction?:      FluffyOpenPopupAction;
}

export interface AddToPlaylistCommand {
    openMiniplayer:      boolean;
    videoId:             string;
    listType:            ListType;
    onCreateListCommand: OnCreateListCommand;
    videoIds:            string[];
    openListPanel?:      boolean;
}

export enum ListType {
    PlaylistEditListTypeQueue = "PLAYLIST_EDIT_LIST_TYPE_QUEUE",
}

export interface OnCreateListCommand {
    clickTrackingParams:           string;
    commandMetadata:               ContinuationEndpointCommandMetadata;
    createPlaylistServiceEndpoint: CreatePlaylistServiceEndpoint;
}

export interface CreatePlaylistServiceEndpoint {
    videoIds: string[];
    params:   string;
}

export interface FluffyOpenPopupAction {
    popup:     FluffyPopup;
    popupType: FluffyPopupType;
}

export interface FluffyPopup {
    notificationActionRenderer: PurpleNotificationActionRenderer;
}

export interface PurpleNotificationActionRenderer {
    responseText:   Subtitle;
    trackingParams: string;
}

export interface Subtitle {
    simpleText: string;
}

export enum FluffyPopupType {
    Toast = "TOAST",
}

export interface MenuRendererSubMenuItem {
    title:          string;
    selected:       boolean;
    continuation:   Continuation;
    accessibility:  ToggledAccessibilityDataClass;
    subtitle:       string;
    trackingParams: string;
}

export interface Continuation {
    reloadContinuationData: ReloadContinuationData;
}

export interface ReloadContinuationData {
    continuation:        string;
    clickTrackingParams: string;
}

export enum TargetID {
    BrowseVideoMenuButton = "browse-video-menu-button",
    LiveChatViewSelectorSubMenu = "live-chat-view-selector-sub-menu",
    WatchRelatedMenuButton = "watch-related-menu-button",
}

export interface OnTap {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    watchEndpoint:       PurpleWatchEndpoint;
}

export interface PurpleWatchEndpoint {
    videoId:                            string;
    watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
    params?:                            string;
    startTimeSeconds?:                  number;
    continuePlayback?:                  boolean;
}

export interface OwnerBadgeElement {
    metadataBadgeRenderer: OwnerBadgeMetadataBadgeRenderer;
}

export interface OwnerBadgeMetadataBadgeRenderer {
    icon:              Icon;
    style:             PurpleStyle;
    tooltip:           MetadataBadgeRendererTooltip;
    trackingParams:    string;
    accessibilityData: AccessibilityAccessibility;
}

export enum PurpleStyle {
    BadgeStyleTypeVerified = "BADGE_STYLE_TYPE_VERIFIED",
    BadgeStyleTypeVerifiedArtist = "BADGE_STYLE_TYPE_VERIFIED_ARTIST",
}

export enum MetadataBadgeRendererTooltip {
    OfficialArtistChannel = "Official Artist Channel",
    Verified = "Verified",
}

export interface RichThumbnail {
    movingThumbnailRenderer: MovingThumbnailRenderer;
}

export interface MovingThumbnailRenderer {
    movingThumbnailDetails?: MovingThumbnailDetails;
    enableHoveredLogging:    boolean;
    enableOverlay:           boolean;
}

export interface MovingThumbnailDetails {
    thumbnails:           SourceElement[];
    logAsMovingThumbnail: boolean;
}

export interface PurpleThumbnailOverlay {
    thumbnailOverlayTimeStatusRenderer?:     PurpleThumbnailOverlayTimeStatusRenderer;
    thumbnailOverlayToggleButtonRenderer?:   ThumbnailOverlayToggleButtonRenderer;
    thumbnailOverlayNowPlayingRenderer?:     ThumbnailOverlayNowPlayingRendererClass;
    thumbnailOverlayLoadingPreviewRenderer?: ThumbnailOverlayNowPlayingRendererClass;
    thumbnailOverlayResumePlaybackRenderer?: ThumbnailOverlayResumePlaybackRenderer;
    thumbnailOverlayEndorsementRenderer?:    ThumbnailOverlayEndorsementRenderer;
}

export interface ThumbnailOverlayEndorsementRenderer {
    text:           ThumbnailText;
    trackingParams: string;
}

export interface ThumbnailText {
    runs?: ThumbnailTextRun[];
}

export interface ThumbnailTextRun {
    text:  string;
    bold?: boolean;
}

export interface ThumbnailOverlayNowPlayingRendererClass {
    text: TitleElement;
}

export interface ThumbnailOverlayResumePlaybackRenderer {
    percentDurationWatched: number;
}

export interface PurpleThumbnailOverlayTimeStatusRenderer {
    text:  ShortViewCountText;
    style: ThumbnailOverlayTimeStatusRendererStyle;
}

export enum ThumbnailOverlayTimeStatusRendererStyle {
    Default = "DEFAULT",
    Live = "LIVE",
    Upcoming = "UPCOMING",
}

export interface ThumbnailOverlayToggleButtonRenderer {
    isToggled?:               boolean;
    untoggledIcon:            Icon;
    toggledIcon:              Icon;
    untoggledTooltip:         UntoggledTooltip;
    toggledTooltip:           ToggledTooltip;
    untoggledServiceEndpoint: UntoggledServiceEndpoint;
    toggledServiceEndpoint?:  ThumbnailOverlayToggleButtonRendererToggledServiceEndpoint;
    untoggledAccessibility:   ToggledAccessibilityDataClass;
    toggledAccessibility:     ToggledAccessibilityDataClass;
    trackingParams:           string;
}

export interface ThumbnailOverlayToggleButtonRendererToggledServiceEndpoint {
    clickTrackingParams:  string;
    commandMetadata:      ContinuationEndpointCommandMetadata;
    playlistEditEndpoint: ToggledServiceEndpointPlaylistEditEndpoint;
}

export interface ToggledServiceEndpointPlaylistEditEndpoint {
    playlistId: PlaylistID;
    actions:    IndigoAction[];
}

export interface IndigoAction {
    action:         Action4;
    removedVideoId: string;
}

export enum Action4 {
    ActionRemoveVideoByVideoID = "ACTION_REMOVE_VIDEO_BY_VIDEO_ID",
}

export enum ToggledTooltip {
    Added = "Added",
}

export interface UntoggledServiceEndpoint {
    clickTrackingParams:    string;
    commandMetadata:        ContinuationEndpointCommandMetadata;
    playlistEditEndpoint?:  UntoggledServiceEndpointPlaylistEditEndpoint;
    signalServiceEndpoint?: UntoggledServiceEndpointSignalServiceEndpoint;
}

export interface UntoggledServiceEndpointSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: IndecentAction[];
}

export interface IndecentAction {
    clickTrackingParams:  string;
    addToPlaylistCommand: AddToPlaylistCommand;
}

export enum UntoggledTooltip {
    AddToQueue = "Add to queue",
    WatchLater = "Watch later",
}

export interface VideoRendererTitle {
    runs:          NumVideosTextRun[];
    accessibility: ToggledAccessibilityDataClass;
}

export interface RichSectionRenderer {
    content:        RichSectionRendererContent;
    trackingParams: string;
    fullBleed:      boolean;
}

export interface RichSectionRendererContent {
    richShelfRenderer: RichShelfRenderer;
}

export interface RichShelfRenderer {
    title:                 Stat;
    contents:              RichShelfRendererContent[];
    trackingParams:        string;
    menu:                  RichShelfRendererMenu;
    showMoreButton:        VoiceSearchButtonClass;
    isExpanded:            boolean;
    icon?:                 Icon;
    isTopDividerHidden:    boolean;
    isBottomDividerHidden: boolean;
    showLessButton:        VoiceSearchButtonClass;
    rowIndex:              number;
    endpoint?:             EndpointClass;
}

export interface RichShelfRendererContent {
    richItemRenderer: FluffyRichItemRenderer;
}

export interface FluffyRichItemRenderer {
    content:        FluffyContent;
    trackingParams: string;
    colIndex:       number;
    rowIndex:       number;
}

export interface FluffyContent {
    reelItemRenderer?: ContentReelItemRenderer;
    videoRenderer?:    FluffyVideoRenderer;
}

export interface ContentReelItemRenderer {
    videoId:                string;
    headline:               Subtitle;
    thumbnail:              ReelWatchEndpointThumbnail;
    viewCountText:          ShortViewCountText;
    navigationEndpoint:     ReelItemRendererNavigationEndpoint;
    menu:                   PurpleMenu;
    trackingParams:         string;
    accessibility:          ToggledAccessibilityDataClass;
    style:                  ReelItemRendererStyle;
    dismissalInfo:          DismissalInfo;
    videoType:              VideoType;
    inlinePlaybackEndpoint: InlinePlaybackEndpointClass;
    loggingDirectives:      ReelItemRendererLoggingDirectives;
}

export interface DismissalInfo {
    feedbackToken: string;
}

export interface ReelItemRendererLoggingDirectives {
    trackingParams:                string;
    visibility:                    VisibilityClass;
    enableDisplayloggerExperiment: boolean;
}

export interface VisibilityClass {
    types: string;
}

export interface PurpleMenu {
    menuRenderer: PurpleMenuRenderer;
}

export interface PurpleMenuRenderer {
    items:          FluffyItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface FluffyItem {
    menuServiceItemRenderer?:    FluffyMenuServiceItemRenderer;
    menuNavigationItemRenderer?: PurpleMenuItemRenderer;
}

export interface PurpleMenuItemRenderer {
    text:                TitleElement;
    icon:                Icon;
    navigationEndpoint?: PurpleNavigationEndpoint;
    trackingParams:      string;
    accessibility?:      ToggledAccessibilityDataClass;
    serviceEndpoint?:    StickyServiceEndpoint;
}

export interface PurpleNavigationEndpoint {
    clickTrackingParams:  string;
    commandMetadata:      DefaultNavigationEndpointCommandMetadata;
    userFeedbackEndpoint: PurpleUserFeedbackEndpoint;
}

export interface DefaultNavigationEndpointCommandMetadata {
    webCommandMetadata: TentacledWebCommandMetadata;
}

export interface TentacledWebCommandMetadata {
    ignoreNavigation: boolean;
}

export interface PurpleUserFeedbackEndpoint {
    additionalDatas: AdditionalData[];
}

export interface AdditionalData {
    userFeedbackEndpointProductSpecificValueData: Param;
}

export interface StickyServiceEndpoint {
    clickTrackingParams:    string;
    commandMetadata:        ContinuationEndpointCommandMetadata;
    getReportFormEndpoint?: GetTranscriptEndpoint;
    feedbackEndpoint?:      FluffyFeedbackEndpoint;
}

export interface FluffyFeedbackEndpoint {
    feedbackToken: string;
    actions:       HilariousAction[];
}

export interface HilariousAction {
    clickTrackingParams:    string;
    replaceEnclosingAction: FluffyReplaceEnclosingAction;
}

export interface FluffyReplaceEnclosingAction {
    item: TentacledItem;
}

export interface TentacledItem {
    notificationMultiActionRenderer: FluffyNotificationMultiActionRenderer;
}

export interface FluffyNotificationMultiActionRenderer {
    responseText:   TitleElement;
    buttons:        ActionButtonElement[];
    trackingParams: string;
}

export interface ActionButtonElement {
    buttonRenderer: FluffyButtonRenderer;
}

export interface FluffyButtonRenderer {
    style:            StyleTypeEnum;
    text:             TitleElement;
    serviceEndpoint?: UndoEndpointClass;
    trackingParams:   string;
    command?:         PurpleCommand;
}

export interface PurpleCommand {
    clickTrackingParams:  string;
    repeatChapterCommand: CommandRepeatChapterCommand;
}

export interface CommandRepeatChapterCommand {
    repeat: Repeat;
}

export enum Repeat {
    RepeatChapterTypeDisableRepeat = "REPEAT_CHAPTER_TYPE_DISABLE_REPEAT",
}

export interface UndoEndpointClass {
    clickTrackingParams:  string;
    commandMetadata:      ContinuationEndpointCommandMetadata;
    undoFeedbackEndpoint: UndoFeedbackEndpoint;
}

export interface FluffyMenuServiceItemRenderer {
    text:            TitleElement;
    icon:            Icon;
    serviceEndpoint: IndigoServiceEndpoint;
    trackingParams:  string;
    accessibility?:  ToggledAccessibilityDataClass;
    hasSeparator?:   boolean;
}

export interface IndigoServiceEndpoint {
    clickTrackingParams:         string;
    commandMetadata:             ContinuationEndpointCommandMetadata;
    getReportFormEndpoint?:      GetTranscriptEndpoint;
    shareEntityServiceEndpoint?: ShareEntityServiceEndpoint;
    feedbackEndpoint?:           FluffyFeedbackEndpoint;
}

export interface ReelItemRendererNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    reelWatchEndpoint?:  ReelWatchEndpoint;
    watchEndpoint?:      FluffyWatchEndpoint;
}

export interface ReelWatchEndpoint {
    videoId:          string;
    playerParams:     string;
    thumbnail:        ReelWatchEndpointThumbnail;
    overlay:          Overlay;
    params:           string;
    sequenceProvider: SequenceProvider;
    sequenceParams:   string;
    loggingContext:   ReelWatchEndpointLoggingContext;
    ustreamerConfig:  string;
}

export interface ReelWatchEndpointLoggingContext {
    vssLoggingContext: LoggingContext;
    qoeLoggingContext: LoggingContext;
}

export interface LoggingContext {
    serializedContextData: string;
}

export interface Overlay {
    reelPlayerOverlayRenderer: ReelPlayerOverlayRenderer;
}

export interface ReelPlayerOverlayRenderer {
    style:                     ReelPlayerOverlayRendererStyle;
    trackingParams:            string;
    reelPlayerNavigationModel: ReelPlayerNavigationModel;
}

export enum ReelPlayerNavigationModel {
    ReelPlayerNavigationModelUnspecified = "REEL_PLAYER_NAVIGATION_MODEL_UNSPECIFIED",
}

export enum ReelPlayerOverlayRendererStyle {
    ReelPlayerOverlayStyleShorts = "REEL_PLAYER_OVERLAY_STYLE_SHORTS",
}

export enum SequenceProvider {
    ReelWatchSequenceProviderRPC = "REEL_WATCH_SEQUENCE_PROVIDER_RPC",
}

export interface ReelWatchEndpointThumbnail {
    thumbnails:            SourceElement[];
    isOriginalAspectRatio: boolean;
}

export interface FluffyWatchEndpoint {
    videoId:                            string;
    nofollow?:                          boolean;
    watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
}

export enum ReelItemRendererStyle {
    ReelItemStyleAvatarCircle = "REEL_ITEM_STYLE_AVATAR_CIRCLE",
}

export enum VideoType {
    ReelVideoTypeVideo = "REEL_VIDEO_TYPE_VIDEO",
}

export interface FluffyVideoRenderer {
    videoId:                            string;
    thumbnail:                          BackgroundElement;
    title:                              VideoRendererTitle;
    descriptionSnippet:                 TitleElement;
    longBylineText:                     LongBylineText;
    publishedTimeText?:                 Subtitle;
    lengthText?:                        ShortViewCountText;
    viewCountText:                      Stat;
    navigationEndpoint:                 NavigationEndpoint;
    ownerBadges?:                       OwnerBadgeElement[];
    ownerText:                          LongBylineText;
    shortBylineText:                    LongBylineText;
    trackingParams:                     string;
    showActionMenu:                     boolean;
    shortViewCountText:                 ShortViewCountTextClass;
    menu:                               FluffyMenu;
    channelThumbnailSupportedRenderers: FluffyChannelThumbnailSupportedRenderers;
    thumbnailOverlays:                  FluffyThumbnailOverlay[];
    richThumbnail?:                     RichThumbnail;
    owner:                              FluffyOwner;
    upcomingEventData?:                 UpcomingEventData;
    buttons?:                           VideoRendererButton[];
}

export interface VideoRendererButton {
    toggleButtonRenderer: PurpleToggleButtonRenderer;
}

export interface PurpleToggleButtonRenderer {
    style:                  ToggledStyleClass;
    isToggled:              boolean;
    isDisabled:             boolean;
    defaultText:            TitleElement;
    defaultServiceEndpoint: PurpleDefaultServiceEndpoint;
    toggledText:            TitleElement;
    toggledServiceEndpoint: PurpleToggledServiceEndpoint;
    trackingParams:         string;
    defaultTooltip:         string;
    toggledStyle:           ToggledStyleClass;
}

export interface PurpleDefaultServiceEndpoint {
    clickTrackingParams:              string;
    commandMetadata:                  ContinuationEndpointCommandMetadata;
    addUpcomingEventReminderEndpoint: GetTranscriptEndpoint;
}

export interface ToggledStyleClass {
    styleType: StyleTypeEnum;
}

export interface PurpleToggledServiceEndpoint {
    clickTrackingParams:                 string;
    commandMetadata:                     ContinuationEndpointCommandMetadata;
    removeUpcomingEventReminderEndpoint: GetTranscriptEndpoint;
}

export interface FluffyChannelThumbnailSupportedRenderers {
    channelThumbnailWithLinkRenderer: FluffyOwner;
}

export interface FluffyOwner {
    thumbnail:          BackgroundElement;
    navigationEndpoint: ChannelNavigationEndpointClass;
    accessibility:      ToggledAccessibilityDataClass;
    title:              string;
}

export interface FluffyMenu {
    menuRenderer: FluffyMenuRenderer;
}

export interface FluffyMenuRenderer {
    items:          StickyItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface StickyItem {
    menuServiceItemRenderer?:         FluffyMenuItemRenderer;
    menuServiceItemDownloadRenderer?: ItemMenuServiceItemDownloadRenderer;
}

export interface FluffyMenuItemRenderer {
    text:                TitleElement;
    icon:                Icon;
    serviceEndpoint?:    IndecentServiceEndpoint;
    trackingParams:      string;
    navigationEndpoint?: FluffyNavigationEndpoint;
}

export interface FluffyNavigationEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       DefaultNavigationEndpointCommandMetadata;
    userFeedbackEndpoint?: FluffyUserFeedbackEndpoint;
    modalEndpoint?:        PurpleModalEndpoint;
}

export interface PurpleModalEndpoint {
    modal: PurpleModal;
}

export interface PurpleModal {
    modalWithTitleAndButtonRenderer: PurpleModalWithTitleAndButtonRenderer;
}

export interface PurpleModalWithTitleAndButtonRenderer {
    title:   TitleElement;
    content: TitleElement;
    button:  FluffyButton;
}

export interface FluffyButton {
    buttonRenderer: TentacledButtonRenderer;
}

export interface TentacledButtonRenderer {
    style:               string;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                Subtitle;
    navigationEndpoint?: TentacledNavigationEndpoint;
    trackingParams:      string;
}

export interface TentacledNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    signInEndpoint:      AdsEngagementPanelContentRenderer;
}

export enum SizeEnum {
    SizeDefault = "SIZE_DEFAULT",
}

export interface FluffyUserFeedbackEndpoint {
    hack:             boolean;
    bucketIdentifier: string;
}

export interface IndecentServiceEndpoint {
    clickTrackingParams:               string;
    commandMetadata?:                  ContinuationEndpointCommandMetadata;
    signalServiceEndpoint?:            FluffySignalServiceEndpoint;
    playlistEditEndpoint?:             UntoggledServiceEndpointPlaylistEditEndpoint;
    addToPlaylistServiceEndpoint?:     AddToPlaylistServiceEndpoint;
    getReportFormEndpoint?:            GetTranscriptEndpoint;
    showLiveChatParticipantsEndpoint?: AdsEngagementPanelContentRenderer;
    popoutLiveChatEndpoint?:           CommonConfig;
    feedbackEndpoint?:                 TentacledFeedbackEndpoint;
    flagEndpoint?:                     FlagEndpoint;
}

export interface TentacledFeedbackEndpoint {
    feedbackToken: string;
    uiActions:     UIActions;
    actions:       AmbitiousAction[];
}

export interface AmbitiousAction {
    clickTrackingParams:    string;
    replaceEnclosingAction: TentacledReplaceEnclosingAction;
}

export interface TentacledReplaceEnclosingAction {
    item: IndigoItem;
}

export interface IndigoItem {
    notificationTextRenderer: NotificationTextRenderer;
}

export interface NotificationTextRenderer {
    successResponseText: TitleElement;
    undoText:            TitleElement;
    undoEndpoint:        UndoEndpointClass;
    trackingParams:      string;
}

export interface FlagEndpoint {
    flagAction: string;
}

export interface FluffySignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: CunningAction[];
}

export interface CunningAction {
    clickTrackingParams:   string;
    addToPlaylistCommand?: AddToPlaylistCommand;
    openPopupAction?:      TentacledOpenPopupAction;
}

export interface TentacledOpenPopupAction {
    popup:     TentacledPopup;
    popupType: PurplePopupType;
}

export interface TentacledPopup {
    confirmDialogRenderer: PurpleConfirmDialogRenderer;
}

export interface PurpleConfirmDialogRenderer {
    title:           TitleElement;
    trackingParams:  string;
    dialogMessages:  TitleElement[];
    confirmButton:   A11YSkipNavigationButtonClass;
    cancelButton:    A11YSkipNavigationButtonClass;
    primaryIsCancel: boolean;
}

export interface A11YSkipNavigationButtonClass {
    buttonRenderer: A11YSkipNavigationButtonButtonRenderer;
}

export interface A11YSkipNavigationButtonButtonRenderer {
    style:            FluffyStyle;
    size:             SizeEnum;
    isDisabled:       boolean;
    text?:            TitleElement;
    accessibility?:   AccessibilityAccessibility;
    trackingParams:   string;
    serviceEndpoint?: HilariousServiceEndpoint;
    command?:         FluffyCommand;
    icon?:            Icon;
}

export interface FluffyCommand {
    clickTrackingParams:          string;
    commandMetadata?:             ContinuationEndpointCommandMetadata;
    continuationCommand?:         ContinuationEndpointContinuationCommand;
    openPopupAction?:             OnClickCommandOpenPopupAction;
    createBackstagePostEndpoint?: CreateBackstagePostEndpoint;
    commandExecutorCommand?:      PurpleCommandExecutorCommand;
    signalServiceEndpoint?:       CommandSignalServiceEndpoint;
}

export interface PurpleCommandExecutorCommand {
    commands: TentacledCommand[];
}

export interface TentacledCommand {
    clickTrackingParams:             string;
    showEngagementPanelEndpoint?:    ShowEngagementPanelEndpoint;
    scrollToEngagementPanelCommand?: ScrollToEngagementPanelCommandClass;
}

export interface ScrollToEngagementPanelCommandClass {
    targetId: PanelIdentifierEnum;
}

export enum PanelIdentifierEnum {
    BrowseFeedFEwhatToWatch = "browse-feedFEwhat_to_watch",
    EngagementPanelCommentsSection = "engagement-panel-comments-section",
    EngagementPanelMacroMarkersDescriptionChapters = "engagement-panel-macro-markers-description-chapters",
    EngagementPanelSearchableTranscript = "engagement-panel-searchable-transcript",
    EngagementPanelStructuredDescription = "engagement-panel-structured-description",
    WatchNextFeed = "watch-next-feed",
}

export interface ShowEngagementPanelEndpoint {
    panelIdentifier:       PanelIdentifierEnum;
    sourcePanelIdentifier: string;
}

export interface CreateBackstagePostEndpoint {
    createBackstagePostParams: string;
}

export interface OnClickCommandOpenPopupAction {
    popup:     StickyPopup;
    popupType: PurplePopupType;
}

export interface StickyPopup {
    confirmDialogRenderer: FluffyConfirmDialogRenderer;
}

export interface FluffyConfirmDialogRenderer {
    title:           Subtitle;
    trackingParams:  string;
    dialogMessages:  Subtitle[];
    confirmButton:   ConfirmButton;
    cancelButton:    CancelButton;
    primaryIsCancel: boolean;
}

export interface CancelButton {
    buttonRenderer: StickyButtonRenderer;
}

export interface StickyButtonRenderer {
    style:          StyleTypeEnum;
    size:           SizeEnum;
    isDisabled:     boolean;
    text:           Subtitle;
    trackingParams: string;
    command:        StickyCommand;
}

export interface StickyCommand {
    clickTrackingParams:    string;
    commandExecutorCommand: FluffyCommandExecutorCommand;
}

export interface FluffyCommandExecutorCommand {
    commands: IndigoCommand[];
}

export interface IndigoCommand {
    clickTrackingParams:                    string;
    changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
    hideEngagementPanelScrimAction?:        HideEngagementPanelScrimAction;
    loopCommand?:                           LoopCommand;
}

export interface ChangeEngagementPanelVisibilityAction {
    targetId:   PanelIdentifier;
    visibility: VisibilityEnum;
}

export enum PanelIdentifier {
    CommentItemSection = "comment-item-section",
    EngagementPanelAds = "engagement-panel-ads",
    EngagementPanelClipCreate = "engagement-panel-clip-create",
    EngagementPanelClipView = "engagement-panel-clip-view",
    EngagementPanelCommentsSection = "engagement-panel-comments-section",
    EngagementPanelMacroMarkersDescriptionChapters = "engagement-panel-macro-markers-description-chapters",
    EngagementPanelMacroMarkersProblemWalkthroughs = "engagement-panel-macro-markers-problem-walkthroughs",
    EngagementPanelSearchableTranscript = "engagement-panel-searchable-transcript",
    EngagementPanelStructuredDescription = "engagement-panel-structured-description",
}

export enum VisibilityEnum {
    EngagementPanelVisibilityExpanded = "ENGAGEMENT_PANEL_VISIBILITY_EXPANDED",
    EngagementPanelVisibilityHidden = "ENGAGEMENT_PANEL_VISIBILITY_HIDDEN",
}

export interface HideEngagementPanelScrimAction {
    engagementPanelTargetId: PanelIdentifier;
}

export interface LoopCommand {
    loop: boolean;
}

export interface ConfirmButton {
    buttonRenderer: IndigoButtonRenderer;
}

export interface IndigoButtonRenderer {
    style:          StyleTypeEnum;
    size:           SizeEnum;
    isDisabled:     boolean;
    text:           Subtitle;
    trackingParams: string;
}

export interface HilariousServiceEndpoint {
    clickTrackingParams:  string;
    commandMetadata:      ContinuationEndpointCommandMetadata;
    unsubscribeEndpoint?: SubscribeEndpoint;
    flagEndpoint?:        FlagEndpoint;
}

export interface SubscribeEndpoint {
    channelIds: string[];
    params:     string;
}

export enum FluffyStyle {
    StyleBlueText = "STYLE_BLUE_TEXT",
    StyleDefault = "STYLE_DEFAULT",
    StylePrimary = "STYLE_PRIMARY",
    StyleSuggestive = "STYLE_SUGGESTIVE",
    StyleText = "STYLE_TEXT",
}

export interface NavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    watchEndpoint:       NextEndpointWatchEndpoint;
}

export interface NextEndpointWatchEndpoint {
    videoId:                            string;
    watchEndpointSupportedOnesieConfig: WatchEndpointSupportedOnesieConfig;
}

export interface FluffyThumbnailOverlay {
    thumbnailOverlayTimeStatusRenderer?:   FluffyThumbnailOverlayTimeStatusRenderer;
    thumbnailOverlayToggleButtonRenderer?: ThumbnailOverlayToggleButtonRenderer;
    thumbnailOverlayNowPlayingRenderer?:   ThumbnailOverlayNowPlayingRendererClass;
}

export interface FluffyThumbnailOverlayTimeStatusRenderer {
    text:  ShortViewCountTextClass;
    style: ThumbnailOverlayTimeStatusRendererStyle;
    icon?: Icon;
}

export interface UpcomingEventData {
    startTime:         string;
    isReminderSet:     boolean;
    upcomingEventText: TitleElement;
}

export interface EndpointClass {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    browseEndpoint:      CommandBrowseEndpoint;
}

export interface CommandBrowseEndpoint {
    browseId: string;
    params?:  string;
}

export interface RichShelfRendererMenu {
    menuRenderer: TentacledMenuRenderer;
}

export interface TentacledMenuRenderer {
    trackingParams:  string;
    topLevelButtons: PurpleTopLevelButton[];
}

export interface PurpleTopLevelButton {
    buttonRenderer: IndecentButtonRenderer;
}

export interface IndecentButtonRenderer {
    style:               StyleTypeEnum;
    size:                SizeEnum;
    isDisabled:          boolean;
    serviceEndpoint?:    AmbitiousServiceEndpoint;
    icon?:               Icon;
    tooltip?:            string;
    trackingParams:      string;
    accessibilityData:   ToggledAccessibilityDataClass;
    text?:               TitleElement;
    navigationEndpoint?: EndpointClass;
}

export interface AmbitiousServiceEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    feedbackEndpoint:    StickyFeedbackEndpoint;
}

export interface StickyFeedbackEndpoint {
    feedbackToken: string;
    uiActions:     UIActions;
    actions:       MagentaAction[];
}

export interface MagentaAction {
    clickTrackingParams:    string;
    replaceEnclosingAction: StickyReplaceEnclosingAction;
}

export interface StickyReplaceEnclosingAction {
    item: IndecentItem;
}

export interface IndecentItem {
    notificationMultiActionRenderer: TentacledNotificationMultiActionRenderer;
}

export interface TentacledNotificationMultiActionRenderer {
    responseText:   TitleElement;
    buttons:        NavigationButtonElement[];
    trackingParams: string;
}

export interface NavigationButtonElement {
    buttonRenderer: NavigationButtonButtonRenderer;
}

export interface NavigationButtonButtonRenderer {
    style:            StyleTypeEnum;
    text:             Subtitle;
    serviceEndpoint?: UndoEndpointClass;
    trackingParams:   string;
    command?:         ShowMoreCommand;
}

export interface ShowMoreCommand {
    clickTrackingParams:    string;
    commandExecutorCommand: ShowMoreCommandCommandExecutorCommand;
}

export interface ShowMoreCommandCommandExecutorCommand {
    commands: OnShowCommandElement[];
}

export interface OnShowCommandElement {
    clickTrackingParams:                    string;
    changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
    scrollToEngagementPanelCommand?:        ScrollToEngagementPanelCommandClass;
    showEngagementPanelScrimAction?:        ShowEngagementPanelScrimAction;
}

export interface ShowEngagementPanelScrimAction {
    engagementPanelTargetId: PanelIdentifier;
    onClickCommands:         OnClickCommand[];
}

export interface OnClickCommand {
    clickTrackingParams: string;
    openPopupAction:     OnClickCommandOpenPopupAction;
}

export interface VoiceSearchDialogRenderer {
    placeholderHeader:              TitleElement;
    promptHeader:                   TitleElement;
    exampleQuery1:                  TitleElement;
    exampleQuery2:                  TitleElement;
    promptMicrophoneLabel:          TitleElement;
    loadingHeader:                  TitleElement;
    connectionErrorHeader:          TitleElement;
    connectionErrorMicrophoneLabel: TitleElement;
    permissionsHeader:              TitleElement;
    permissionsSubtext:             TitleElement;
    disabledHeader:                 TitleElement;
    disabledSubtext:                TitleElement;
    microphoneButtonAriaLabel:      TitleElement;
    exitButton:                     VoiceSearchButtonClass;
    trackingParams:                 string;
    microphoneOffPromptHeader:      TitleElement;
}

export interface IndigoPopup {
    voiceSearchDialogRenderer: VoiceSearchDialogRenderer;
}

export interface StickyOpenPopupAction {
    popup:     IndigoPopup;
    popupType: string;
}

export interface FriskyAction {
    clickTrackingParams: string;
    openPopupAction:     StickyOpenPopupAction;
}

export interface TentacledSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: FriskyAction[];
}

export interface CunningServiceEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       OnUnsubscribeEndpointCommandMetadata;
    signalServiceEndpoint: TentacledSignalServiceEndpoint;
}

export interface VoiceSearchButtonButtonRenderer {
    style?:              StyleTypeEnum;
    size?:               SizeEnum;
    icon?:               Icon;
    accessibility?:      AccessibilityAccessibility;
    tooltip?:            PurpleTooltip;
    trackingParams:      string;
    isDisabled?:         boolean;
    accessibilityData?:  ToggledAccessibilityDataClass;
    command?:            IndecentCommand;
    navigationEndpoint?: NavigationEndpoint;
    serviceEndpoint?:    CunningServiceEndpoint;
}

export interface VoiceSearchButtonClass {
    buttonRenderer: VoiceSearchButtonButtonRenderer;
}

export interface OnUnsubscribeEndpointCommandMetadata {
    webCommandMetadata: StickyWebCommandMetadata;
}

export interface StickyWebCommandMetadata {
    sendPost: boolean;
}

export interface IndecentCommand {
    clickTrackingParams:                    string;
    openPopupAction?:                       OnClickCommandOpenPopupAction;
    commandExecutorCommand?:                TentacledCommandExecutorCommand;
    changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
}

export interface TentacledCommandExecutorCommand {
    commands: HilariousCommand[];
}

export interface HilariousCommand {
    clickTrackingParams:                    string;
    changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
    updateToggleButtonStateCommand?:        UpdateToggleButtonStateCommand;
}

export interface UpdateToggleButtonStateCommand {
    toggled:  boolean;
    buttonId: ButtonID;
}

export enum ButtonID {
    ToggleButtonIDTypeDislike = "TOGGLE_BUTTON_ID_TYPE_DISLIKE",
    ToggleButtonIDTypeLike = "TOGGLE_BUTTON_ID_TYPE_LIKE",
    ToggleButtonIDTypeStructuredDescription = "TOGGLE_BUTTON_ID_TYPE_STRUCTURED_DESCRIPTION",
}

export enum PurpleTooltip {
    SearchWithYourVoice = "Search with your voice",
    ShowLess = "Show less",
    ShowMore = "Show more",
}

export interface RichGridRendererHeader {
    feedFilterChipBarRenderer: FeedFilterChipBarRenderer;
}

export interface FeedFilterChipBarRenderer {
    contents:       FeedFilterChipBarRendererContent[];
    trackingParams: string;
    nextButton:     ShareButton;
    previousButton: ShareButton;
    styleType:      string;
}

export interface FeedFilterChipBarRendererContent {
    chipCloudChipRenderer: ContentChipCloudChipRenderer;
}

export interface ContentChipCloudChipRenderer {
    style:               ToggledStyleClass;
    text:                TitleElement;
    trackingParams:      string;
    isSelected?:         boolean;
    navigationEndpoint?: ChipCloudChipRendererServiceEndpoint;
    targetId?:           string;
    uniqueId?:           string;
}

export interface ChipCloudChipRendererServiceEndpoint {
    clickTrackingParams:  string;
    commandMetadata?:     ContinuationEndpointCommandMetadata;
    continuationCommand?: ServiceEndpointContinuationCommand;
    relatedChipCommand?:  RelatedChipCommand;
}

export interface ServiceEndpointContinuationCommand {
    token:   string;
    request: Request;
    command: ContinuationCommandCommand;
}

export interface ContinuationCommandCommand {
    clickTrackingParams: string;
    showReloadUiCommand: ScrollToEngagementPanelCommandClass;
}

export interface RelatedChipCommand {
    targetSectionIdentifier: string;
    loadCached:              boolean;
    contents:                RelatedChipCommandContent[];
}

export interface RelatedChipCommandContent {
    adSlotRenderer?:           ContentAdSlotRenderer;
    compactVideoRenderer?:     ContentCompactVideoRenderer;
    reelShelfRenderer?:        ReelShelfRenderer;
    continuationItemRenderer?: ResultContinuationItemRenderer;
    compactPlaylistRenderer?:  CompactPlaylistRenderer;
}

export interface ContentAdSlotRenderer {
    adSlotMetadata:       AdSlotMetadata;
    fulfillmentContent:   PurpleFulfillmentContent;
    enablePacfLoggingWeb: boolean;
}

export interface AdSlotMetadata {
    slotId:               string;
    slotType:             string;
    slotPhysicalPosition: number;
    adSlotLoggingData:    AdSlotLoggingData;
}

export interface AdSlotLoggingData {
    serializedSlotAdServingDataEntry: string;
}

export interface PurpleFulfillmentContent {
    fulfilledLayout: PurpleFulfilledLayout;
}

export interface PurpleFulfilledLayout {
    inFeedAdLayoutRenderer: InFeedAdLayoutRenderer;
}

export interface InFeedAdLayoutRenderer {
    adLayoutMetadata: AdLayoutMetadat;
    renderingContent: InFeedAdLayoutRendererRenderingContent;
}

export interface AdLayoutMetadat {
    layoutId:            string;
    layoutType:          LayoutType;
    adLayoutLoggingData: AdLayoutLoggingData;
}

export interface AdLayoutLoggingData {
    serializedAdServingDataEntry: string;
}

export enum LayoutType {
    LayoutTypeDisplaySquareImage = "LAYOUT_TYPE_DISPLAY_SQUARE_IMAGE",
    LayoutTypeVideoDisplayBillboardImageButtoned = "LAYOUT_TYPE_VIDEO_DISPLAY_BILLBOARD_IMAGE_BUTTONED",
}

export interface InFeedAdLayoutRendererRenderingContent {
    promotedSparklesWebRenderer: PromotedSparklesWebRenderer;
}

export interface PromotedSparklesWebRenderer {
    thumbnail:            BackgroundElement;
    icon:                 Icon;
    title:                Subtitle;
    description:          Subtitle;
    websiteText:          Subtitle;
    actionButton:         PromotedSparklesWebRendererActionButton;
    navigationEndpoint:   PromotedSparklesWebRendererCommand;
    impressionCommands:   ImpressionCommandElement[];
    menu:                 PromotedSparklesWebRendererMenu;
    trackingParams:       string;
    clickLocationTargets: ClickLocationTarget[];
    adBadge:              AdBadgeElement;
}

export interface PromotedSparklesWebRendererActionButton {
    buttonRenderer: HilariousButtonRenderer;
}

export interface HilariousButtonRenderer {
    style:          FluffyStyle;
    text:           Subtitle;
    icon:           Icon;
    trackingParams: string;
    iconPosition:   string;
}

export interface AdBadgeElement {
    metadataBadgeRenderer: AdBadgeMetadataBadgeRenderer;
}

export interface AdBadgeMetadataBadgeRenderer {
    style:          TentacledStyle;
    label:          Label;
    trackingParams: string;
    icon?:          Icon;
}

export enum Label {
    Fundraiser = "Fundraiser",
    Live = "LIVE",
    New = "New",
    Sponsored = "Sponsored",
    Unlisted = "Unlisted",
}

export enum TentacledStyle {
    BadgeStyleTypeAd = "BADGE_STYLE_TYPE_AD",
    BadgeStyleTypeLiveNow = "BADGE_STYLE_TYPE_LIVE_NOW",
    BadgeStyleTypeMediumGrey = "BADGE_STYLE_TYPE_MEDIUM_GREY",
    BadgeStyleTypeSimple = "BADGE_STYLE_TYPE_SIMPLE",
    BadgeStyleTypeYpc = "BADGE_STYLE_TYPE_YPC",
}

export interface ClickLocationTarget {
    location:     string;
    code:         number;
    behaviorType: BehaviorType;
}

export enum BehaviorType {
    PromotedSparklesClickBehaviorTypeNoop = "PROMOTED_SPARKLES_CLICK_BEHAVIOR_TYPE_NOOP",
    PromotedSparklesClickBehaviorTypeOpenAd = "PROMOTED_SPARKLES_CLICK_BEHAVIOR_TYPE_OPEN_AD",
}

export interface ImpressionCommandElement {
    clickTrackingParams: string;
    loggingUrls:         LoggingURL[];
    pingingEndpoint:     AdsEngagementPanelContentRenderer;
}

export interface PromotedSparklesWebRendererMenu {
    menuRenderer: StickyMenuRenderer;
}

export interface StickyMenuRenderer {
    trackingParams:  string;
    isDisabled:      boolean;
    disabledCommand: DisabledCommand;
}

export interface DisabledCommand {
    clickTrackingParams: string;
    openPopupAction:     DisabledCommandOpenPopupAction;
}

export interface DisabledCommandOpenPopupAction {
    popup:     IndecentPopup;
    popupType: PurplePopupType;
}

export interface IndecentPopup {
    aboutThisAdRenderer: AboutThisAdRenderer;
}

export interface AboutThisAdRenderer {
    url:            URL;
    trackingParams: string;
}

export interface URL {
    privateDoNotAccessOrElseTrustedResourceUrlWrappedValue: string;
}

export interface CompactPlaylistRenderer {
    playlistId:          string;
    thumbnail:           PlaylistVideoThumbnailRendererThumbnail;
    title:               Subtitle;
    shortBylineText:     LongBylineText;
    videoCountText:      TitleElement;
    navigationEndpoint:  CurrentVideoEndpoint;
    publishedTimeText?:  Subtitle;
    videoCountShortText: Subtitle;
    trackingParams:      string;
    sidebarThumbnails:   BackgroundElement[];
    thumbnailText:       ThumbnailText;
    menu:                MoreActionsMenuClass;
    shareUrl:            string;
    thumbnailRenderer:   CompactPlaylistRendererThumbnailRenderer;
    longBylineText:      LongBylineText;
    thumbnailOverlays:   CompactPlaylistRendererThumbnailOverlay[];
}

export interface MoreActionsMenuClass {
    menuRenderer: MoreActionsMenuMenuRenderer;
}

export interface MoreActionsMenuMenuRenderer {
    items?:         HilariousItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface HilariousItem {
    menuServiceItemRenderer: FluffyMenuItemRenderer;
}

export interface CurrentVideoEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    watchEndpoint:       CurrentVideoEndpointWatchEndpoint;
}

export interface CurrentVideoEndpointWatchEndpoint {
    videoId:                               string;
    playlistId?:                           string;
    index?:                                number;
    params?:                               string;
    playerParams?:                         string;
    loggingContext?:                       WatchEndpointLoggingContext;
    watchEndpointSupportedOnesieConfig?:   WatchEndpointSupportedOnesieConfig;
    watchEndpointSupportedPrefetchConfig?: WatchEndpointSupportedPrefetchConfig;
}

export interface WatchEndpointLoggingContext {
    vssLoggingContext: LoggingContext;
}

export interface WatchEndpointSupportedPrefetchConfig {
    prefetchHintConfig: PrefetchHintConfig;
}

export interface PrefetchHintConfig {
    prefetchPriority:                             number;
    countdownUiRelativeSecondsPrefetchCondition?: number;
    playbackRelativeSecondsPrefetchCondition?:    number;
}

export interface PlaylistVideoThumbnailRendererThumbnail {
    thumbnails:            SourceElement[];
    sampledThumbnailColor: SampledThumbnailColor;
    darkColorPalette:      DarkColorPalette;
    vibrantColorPalette:   VibrantColorPalette;
}

export interface DarkColorPalette {
    section2Color:     number;
    iconInactiveColor: number;
    iconDisabledColor: number;
}

export interface SampledThumbnailColor {
    red:   number;
    green: number;
    blue:  number;
}

export interface VibrantColorPalette {
    iconInactiveColor: number;
}

export interface CompactPlaylistRendererThumbnailOverlay {
    thumbnailOverlayBottomPanelRenderer?: ThumbnailOverlayHoverTextRendererClass;
    thumbnailOverlayHoverTextRenderer?:   ThumbnailOverlayHoverTextRenderer;
    thumbnailOverlayNowPlayingRenderer?:  ThumbnailOverlayNowPlayingRendererClass;
}

export interface ThumbnailOverlayHoverTextRendererClass {
    text: Subtitle;
    icon: Icon;
}

export interface ThumbnailOverlayHoverTextRenderer {
    text: TitleElement;
    icon: Icon;
}

export interface CompactPlaylistRendererThumbnailRenderer {
    playlistCustomThumbnailRenderer?: PlaylistCustomThumbnailRenderer;
    playlistVideoThumbnailRenderer?:  PlaylistVideoThumbnailRenderer;
}

export interface PlaylistCustomThumbnailRenderer {
    thumbnail: PlaylistVideoThumbnailRendererThumbnail;
}

export interface PlaylistVideoThumbnailRenderer {
    thumbnail:      PlaylistVideoThumbnailRendererThumbnail;
    trackingParams: string;
}

export interface ContentCompactVideoRenderer {
    videoId:            string;
    thumbnail:          BackgroundElement;
    title:              ShortViewCountText;
    longBylineText:     LongBylineText;
    publishedTimeText:  Subtitle;
    viewCountText:      Subtitle;
    lengthText:         ShortViewCountText;
    navigationEndpoint: ReelItemRendererNavigationEndpoint;
    shortBylineText:    LongBylineText;
    badges?:            AdBadgeElement[];
    channelThumbnail:   BackgroundElement;
    ownerBadges?:       OwnerBadgeElement[];
    trackingParams:     string;
    shortViewCountText: ShortViewCountText;
    menu:               CompactVideoRendererMenu;
    thumbnailOverlays:  CompactVideoRendererThumbnailOverlay[];
    accessibility:      ToggledAccessibilityDataClass;
    richThumbnail?:     RichThumbnail;
}

export interface CompactVideoRendererThumbnailOverlay {
    thumbnailOverlayTimeStatusRenderer?:     PurpleThumbnailOverlayTimeStatusRenderer;
    thumbnailOverlayToggleButtonRenderer?:   ThumbnailOverlayToggleButtonRenderer;
    thumbnailOverlayNowPlayingRenderer?:     ThumbnailOverlayNowPlayingRendererClass;
    thumbnailOverlayResumePlaybackRenderer?: ThumbnailOverlayResumePlaybackRenderer;
}

export interface ResultContinuationItemRenderer {
    trigger:              Trigger;
    continuationEndpoint: PurpleContinuationEndpoint;
    button:               A11YSkipNavigationButtonClass;
}

export interface ReelShelfRenderer {
    title:          TitleElement;
    items:          ReelShelfRendererItem[];
    trackingParams: string;
    icon?:          Icon;
    nextButton:     ReelShelfRendererNextButton;
    previousButton: ReelShelfRendererNextButton;
}

export interface ReelShelfRendererItem {
    reelItemRenderer: ItemReelItemRenderer;
}

export interface ItemReelItemRenderer {
    videoId:            string;
    headline:           Subtitle;
    thumbnail:          ReelWatchEndpointThumbnail;
    viewCountText:      ShortViewCountText;
    navigationEndpoint: ReelItemRendererNavigationEndpoint;
    menu:               TentacledMenu;
    trackingParams:     string;
    accessibility:      ToggledAccessibilityDataClass;
    style:              ReelItemRendererStyle;
    dismissalInfo:      DismissalInfo;
    videoType:          VideoType;
    loggingDirectives:  ReelItemRendererLoggingDirectives;
}

export interface TentacledMenu {
    menuRenderer: IndigoMenuRenderer;
}

export interface IndigoMenuRenderer {
    items:          AmbitiousItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface AmbitiousItem {
    menuServiceItemRenderer?:    PurpleMenuItemRenderer;
    menuNavigationItemRenderer?: PurpleMenuItemRenderer;
}

export interface ReelShelfRendererNextButton {
    buttonRenderer: AmbitiousButtonRenderer;
}

export interface AmbitiousButtonRenderer {
    style:         StyleTypeEnum;
    size:          SizeEnum;
    icon:          Icon;
    accessibility: AccessibilityAccessibility;
}

export interface ShareButton {
    buttonRenderer: InformationButtonButtonRenderer;
}

export interface InformationButtonButtonRenderer {
    style:               StyleTypeEnum;
    size:                SizeEnum;
    isDisabled:          boolean;
    icon?:               Icon;
    tooltip?:            string;
    trackingParams:      string;
    accessibilityData?:  ToggledAccessibilityDataClass;
    command?:            AmbitiousCommand;
    text?:               Stat;
    serviceEndpoint?:    MagentaServiceEndpoint;
    accessibility?:      AccessibilityAccessibility;
    targetId?:           string;
    navigationEndpoint?: IndigoNavigationEndpoint;
}

export interface AmbitiousCommand {
    clickTrackingParams:     string;
    commandExecutorCommand?: StickyCommandExecutorCommand;
    openPopupAction?:        IndigoOpenPopupAction;
    commandMetadata?:        ContinuationEndpointCommandMetadata;
    getSurveyCommand?:       GetSurveyCommand;
}

export interface StickyCommandExecutorCommand {
    commands: CunningCommand[];
}

export interface CunningCommand {
    clickTrackingParams: string;
    entityUpdateCommand: PurpleEntityUpdateCommand;
}

export interface PurpleEntityUpdateCommand {
    entityBatchUpdate: PurpleEntityBatchUpdate;
}

export interface PurpleEntityBatchUpdate {
    mutations: PurpleMutation[];
}

export interface PurpleMutation {
    entityKey: string;
    type:      string;
    payload:   PurplePayload;
}

export interface PurplePayload {
    playlistLoopStateEntity: PlaylistLoopStateEntity;
}

export interface PlaylistLoopStateEntity {
    key:   string;
    state: string;
}

export interface GetSurveyCommand {
    endpoint: GetSurveyCommandEndpoint;
    action:   string;
}

export interface GetSurveyCommandEndpoint {
    watch: AdsEngagementPanelContentRenderer;
}

export interface IndigoOpenPopupAction {
    popup:     HilariousPopup;
    popupType: PurplePopupType;
}

export interface HilariousPopup {
    confirmDialogRenderer: TentacledConfirmDialogRenderer;
}

export interface TentacledConfirmDialogRenderer {
    title:           Subtitle;
    trackingParams:  string;
    dialogMessages:  Subtitle[];
    confirmButton:   ConfirmButton;
    cancelButton:    ModalWithTitleAndButtonRendererCancelButton;
    primaryIsCancel: boolean;
}

export interface ModalWithTitleAndButtonRendererCancelButton {
    buttonRenderer: CunningButtonRenderer;
}

export interface CunningButtonRenderer {
    style:               StyleTypeEnum;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                Subtitle;
    navigationEndpoint?: StickyNavigationEndpoint;
    trackingParams:      string;
    command?:            PromotedSparklesWebRendererCommand;
}

export interface StickyNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    signInEndpoint:      PurpleSignInEndpoint;
}

export interface PurpleSignInEndpoint {
    nextEndpoint: NextEndpoint;
    idamTag:      string;
}

export interface NextEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    watchEndpoint?:      NextEndpointWatchEndpoint;
    browseEndpoint?:     NextEndpointBrowseEndpoint;
}

export interface NextEndpointBrowseEndpoint {
    browseId: string;
}

export interface IndigoNavigationEndpoint {
    clickTrackingParams:         string;
    commandMetadata:             PurpleCommandMetadata;
    shareEntityServiceEndpoint?: ShareEntityServiceEndpoint;
    watchEndpoint?:              CurrentVideoEndpointWatchEndpoint;
}

export interface PurpleCommandMetadata {
    webCommandMetadata: IndigoWebCommandMetadata;
}

export interface IndigoWebCommandMetadata {
    sendPost?:    boolean;
    apiUrl?:      APIURL;
    url?:         string;
    webPageType?: WebPageType;
    rootVe?:      number;
}

export interface MagentaServiceEndpoint {
    clickTrackingParams:        string;
    commandMetadata:            ContinuationEndpointCommandMetadata;
    shareEntityServiceEndpoint: ShareEntityServiceEndpoint;
}

export interface Masthead {
    adSlotRenderer: MastheadAdSlotRenderer;
}

export interface MastheadAdSlotRenderer {
    adSlotMetadata:       AdSlotMetadata;
    fulfillmentContent:   FluffyFulfillmentContent;
    enablePacfLoggingWeb: boolean;
}

export interface FluffyFulfillmentContent {
    fulfilledLayout: FluffyFulfilledLayout;
}

export interface FluffyFulfilledLayout {
    pageTopAdLayoutRenderer: PageTopAdLayoutRenderer;
}

export interface PageTopAdLayoutRenderer {
    adLayoutMetadata: AdLayoutMetadat;
    renderingContent: PageTopAdLayoutRendererRenderingContent;
}

export interface PageTopAdLayoutRendererRenderingContent {
    videoMastheadAdV3Renderer: VideoMastheadAdV3Renderer;
}

export interface VideoMastheadAdV3Renderer {
    trackingParams:      string;
    primaryVideo:        PrimaryVideo;
    advertiserInfo:      AdvertiserInfo;
    primaryVideoOverlay: PrimaryVideoOverlay;
    activeView:          ActiveView;
    showAdRenderer:      ShowAdRenderer;
}

export interface ActiveView {
    viewableCommands:       ImpressionCommandElement[];
    endOfSessionCommands:   ImpressionCommandElement[];
    regexUriMacroValidator: RegexURIMacroValidator;
}

export interface RegexURIMacroValidator {
    emptyMap: boolean;
}

export interface AdvertiserInfo {
    videoMastheadAdAdvertiserInfoRenderer: VideoMastheadAdAdvertiserInfoRenderer;
}

export interface VideoMastheadAdAdvertiserInfoRenderer {
    trackingParams:   string;
    title:            Subtitle;
    byline:           LongBylineText;
    channelThumbnail: Channel;
    channelBanner:    Channel;
    badges:           AdBadgeElement[];
    cta:              Cta;
    channelEndpoint:  ChannelNavigationEndpointClass;
    menu:             PromotedSparklesWebRendererMenu;
}

export interface Channel {
    thumbnails: CommonConfig[];
}

export interface Cta {
    buttonRenderer: CtaButtonRenderer;
}

export interface CtaButtonRenderer {
    style:               FluffyStyle;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                Subtitle;
    navigationEndpoint?: IndecentNavigationEndpoint;
    trackingParams:      string;
    command?:            StickyCommand;
}

export interface IndecentNavigationEndpoint {
    clickTrackingParams: string;
    loggingUrls?:        LoggingURL[];
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    urlEndpoint?:        CommandURLEndpoint;
    signInEndpoint?:     FluffySignInEndpoint;
}

export interface FluffySignInEndpoint {
    nextEndpoint: InnertubeCommandClass;
    idamTag:      string;
}

export interface InnertubeCommandClass {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    browseEndpoint:      NextEndpointBrowseEndpoint;
}

export interface PrimaryVideo {
    videoMastheadAdPrimaryVideoRenderer: VideoMastheadAdPrimaryVideoRenderer;
}

export interface VideoMastheadAdPrimaryVideoRenderer {
    trackingParams:            string;
    videoId:                   string;
    isWidescreen:              boolean;
    playbackStartMs:           number;
    muteButton:                MuteButton;
    navigationEndpoint:        InlinePlaybackEndpointClass;
    clickthroughReportingData: ClickthroughReportingData;
    playbackDurationMs:        number;
    playerParams:              string;
    disableAutoPlayback:       boolean;
    accessibilityData:         AccessibilityAccessibility;
}

export interface ClickthroughReportingData {
    reportingPings: ReportingPing[];
}

export interface ReportingPing {
    pingType: string;
    url:      string;
}

export interface MuteButton {
    toggleButtonRenderer: MuteButtonToggleButtonRenderer;
}

export interface MuteButtonToggleButtonRenderer {
    style:          ToggledStyleClass;
    isToggled:      boolean;
    isDisabled:     boolean;
    defaultIcon:    Icon;
    toggledIcon:    Icon;
    trackingParams: string;
    toggledStyle:   ToggledStyleClass;
}

export interface PrimaryVideoOverlay {
    videoMastheadAdPrimaryVideoOverlayRenderer: VideoMastheadAdPrimaryVideoOverlayRenderer;
}

export interface VideoMastheadAdPrimaryVideoOverlayRenderer {
    trackingParams: string;
    title:          Subtitle;
    byline:         LongBylineText;
    badges:         AdBadgeElement[];
    menu:           PromotedSparklesWebRendererMenu;
}

export interface ShowAdRenderer {
    buttonRenderer: ShowAdRendererButtonRenderer;
}

export interface ShowAdRendererButtonRenderer {
    style:          StyleTypeEnum;
    size:           SizeEnum;
    text:           Subtitle;
    trackingParams: string;
    command?:       MagentaCommand;
    isDisabled?:    boolean;
}

export interface MagentaCommand {
    clickTrackingParams:         string;
    videoMastheadAdMuteCommand?: VideoMastheadAdMuteCommand;
    commandExecutorCommand?:     FluffyCommandExecutorCommand;
}

export interface VideoMastheadAdMuteCommand {
    encryptedMastheadId: string;
}

export interface ReflowOptions {
    minimumRowsOfVideosAtStart:         number;
    minimumRowsOfVideosBetweenSections: number;
}

export interface PurpleSectionListRenderer {
    contents:       TentacledContent[];
    trackingParams: string;
}

export interface TentacledContent {
    itemSectionRenderer: PurpleItemSectionRenderer;
}

export interface PurpleItemSectionRenderer {
    contents:       StickyContent[];
    trackingParams: string;
}

export interface StickyContent {
    playlistVideoListRenderer: PlaylistVideoListRenderer;
}

export interface PlaylistVideoListRenderer {
    contents:       PlaylistVideoListRendererContent[];
    playlistId:     string;
    isEditable:     boolean;
    canReorder:     boolean;
    trackingParams: string;
    targetId:       string;
}

export interface PlaylistVideoListRendererContent {
    playlistVideoRenderer: PlaylistVideoRenderer;
}

export interface PlaylistVideoRenderer {
    videoId:            string;
    thumbnail:          BackgroundElement;
    title:              VideoRendererTitle;
    index:              Subtitle;
    shortBylineText:    LongBylineText;
    lengthText:         ShortViewCountText;
    navigationEndpoint: CurrentVideoEndpoint;
    lengthSeconds:      string;
    trackingParams:     string;
    isPlayable:         boolean;
    menu:               PlaylistVideoRendererMenu;
    thumbnailOverlays:  PlaylistVideoRendererThumbnailOverlay[];
    videoInfo:          TitleElement;
}

export interface PlaylistVideoRendererMenu {
    menuRenderer: IndecentMenuRenderer;
}

export interface IndecentMenuRenderer {
    items:          CunningItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface CunningItem {
    menuServiceItemRenderer?:         TentacledMenuServiceItemRenderer;
    menuServiceItemDownloadRenderer?: ItemMenuServiceItemDownloadRenderer;
}

export interface TentacledMenuServiceItemRenderer {
    text:            TitleElement;
    icon:            Icon;
    serviceEndpoint: FriskyServiceEndpoint;
    trackingParams:  string;
    hasSeparator?:   boolean;
}

export interface FriskyServiceEndpoint {
    clickTrackingParams:           string;
    commandMetadata:               ContinuationEndpointCommandMetadata;
    signalServiceEndpoint?:        UntoggledServiceEndpointSignalServiceEndpoint;
    playlistEditEndpoint?:         UntoggledServiceEndpointPlaylistEditEndpoint;
    addToPlaylistServiceEndpoint?: AddToPlaylistServiceEndpoint;
    shareEntityServiceEndpoint?:   ShareEntityServiceEndpoint;
    feedbackEndpoint?:             PurpleFeedbackEndpoint;
    getReportFormEndpoint?:        GetTranscriptEndpoint;
}

export interface PlaylistVideoRendererThumbnailOverlay {
    thumbnailOverlayPlaybackStatusRenderer?: ThumbnailOverlayPlaybackStatusRenderer;
    thumbnailOverlayResumePlaybackRenderer?: ThumbnailOverlayResumePlaybackRenderer;
    thumbnailOverlayTimeStatusRenderer?:     PurpleThumbnailOverlayTimeStatusRenderer;
    thumbnailOverlayNowPlayingRenderer?:     ThumbnailOverlayNowPlayingRendererClass;
    thumbnailOverlayToggleButtonRenderer?:   ThumbnailOverlayToggleButtonRenderer;
}

export interface ThumbnailOverlayPlaybackStatusRenderer {
    texts: TitleElement[];
}

export interface TwoColumnWatchNextResults {
    results:          TwoColumnWatchNextResultsResults;
    secondaryResults: TwoColumnWatchNextResultsSecondaryResults;
    autoplay:         TwoColumnWatchNextResultsAutoplay;
    playlist?:        TwoColumnWatchNextResultsPlaylist;
    conversationBar?: ConversationBar;
}

export interface TwoColumnWatchNextResultsAutoplay {
    autoplay: AutoplayAutoplay;
}

export interface AutoplayAutoplay {
    sets:           Set[];
    countDownSecs?: number;
    trackingParams: string;
    modifiedSets?:  ModifiedSet[];
}

export interface ModifiedSet {
    autoplayVideo:        Video;
    nextButtonVideo:      Video;
    previousButtonVideo?: Video;
}

export interface Video {
    clickTrackingParams:   string;
    commandMetadata:       InlinePlaybackEndpointCommandMetadata;
    watchPlaylistEndpoint: WatchPlaylistEndpoint;
}

export interface WatchPlaylistEndpoint {
    playlistId: string;
    index:      number;
    params:     string;
}

export interface Set {
    mode:                 string;
    autoplayVideo:        CurrentVideoEndpoint;
    nextButtonVideo?:     CurrentVideoEndpoint;
    previousButtonVideo?: CurrentVideoEndpoint;
}

export interface ConversationBar {
    liveChatRenderer: LiveChatRenderer;
}

export interface LiveChatRenderer {
    continuations:       Continuation[];
    header:              LiveChatRendererHeader;
    trackingParams:      string;
    clientMessages:      ClientMessages;
    initialDisplayState: string;
    showHideButton:      ShowHideButton;
}

export interface ClientMessages {
    reconnectMessage:         TitleElement;
    unableToReconnectMessage: TitleElement;
    fatalError:               TitleElement;
    reconnectedMessage:       TitleElement;
    genericError:             TitleElement;
}

export interface LiveChatRendererHeader {
    liveChatHeaderRenderer: LiveChatHeaderRenderer;
}

export interface LiveChatHeaderRenderer {
    overflowMenu: OverflowMenu;
    viewSelector: ViewSelector;
}

export interface OverflowMenu {
    menuRenderer: OverflowMenuMenuRenderer;
}

export interface OverflowMenuMenuRenderer {
    items:          MagentaItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface MagentaItem {
    menuServiceItemRenderer?:          FluffyMenuItemRenderer;
    clientSideToggleMenuItemRenderer?: ClientSideToggleMenuItemRenderer;
    menuNavigationItemRenderer?:       FluffyMenuItemRenderer;
}

export interface ClientSideToggleMenuItemRenderer {
    defaultText:        TitleElement;
    defaultIcon:        Icon;
    toggledText:        TitleElement;
    toggledIcon:        Icon;
    menuItemIdentifier: string;
    command:            ClientSideToggleMenuItemRendererCommand;
}

export interface ClientSideToggleMenuItemRendererCommand {
    clickTrackingParams:              string;
    toggleLiveChatTimestampsEndpoint: AdsEngagementPanelContentRenderer;
}

export interface ViewSelector {
    sortFilterSubMenuRenderer: MenuRenderer;
}

export interface ShowHideButton {
    toggleButtonRenderer: ShowHideButtonToggleButtonRenderer;
}

export interface ShowHideButtonToggleButtonRenderer {
    defaultText:    TitleElement;
    toggledText:    TitleElement;
    trackingParams: string;
}

export interface TwoColumnWatchNextResultsPlaylist {
    playlist: PlaylistPlaylist;
}

export interface PlaylistPlaylist {
    title:             string;
    contents:          PlaylistContent[];
    currentIndex:      number;
    playlistId:        string;
    totalVideos:       number;
    isInfinite:        boolean;
    playlistShareUrl:  string;
    shortBylineText:   LongBylineText;
    longBylineText:    LongBylineText;
    totalVideosText:   TitleElement;
    trackingParams:    string;
    titleText:         TitleText;
    endpoint:          InnertubeCommandClass;
    menu:              PlaylistMenu;
    localCurrentIndex: number;
    playlistButtons:   PlaylistButtons;
    badges:            AdBadgeElement[];
    videoCountText:    TitleElement;
    isCourse:          boolean;
    nextVideoLabel:    Subtitle;
}

export interface PlaylistContent {
    playlistPanelVideoRenderer: PlaylistPanelVideoRenderer;
}

export interface PlaylistPanelVideoRenderer {
    title:              ShortViewCountText;
    longBylineText:     LongBylineText;
    thumbnail:          BackgroundElement;
    lengthText:         ShortViewCountText;
    indexText:          Subtitle;
    selected:           boolean;
    navigationEndpoint: CurrentVideoEndpoint;
    videoId:            string;
    shortBylineText:    LongBylineText;
    trackingParams:     string;
    menu:               PlaylistPanelVideoRendererMenu;
    thumbnailOverlays:  PlaylistVideoRendererThumbnailOverlay[];
    playlistSetVideoId: string;
    lightColorPalette:  ColorPalette;
    darkColorPalette:   ColorPalette;
    actionButtons?:     PlaylistPanelVideoRendererActionButton[];
}

export interface PlaylistPanelVideoRendererActionButton {
    slimMetadataToggleButtonRenderer: SlimMetadataToggleButtonRenderer;
}

export interface SlimMetadataToggleButtonRenderer {
    likeStatus:          Status;
    isLike?:             boolean;
    button:              SlimMetadataToggleButtonRendererButton;
    likeStatusEntityKey: string;
    isDislike?:          boolean;
}

export interface SlimMetadataToggleButtonRendererButton {
    toggleButtonRenderer: FluffyToggleButtonRenderer;
}

export interface FluffyToggleButtonRenderer {
    isToggled:                 boolean;
    isDisabled:                boolean;
    defaultIcon:               Icon;
    defaultServiceEndpoint:    FluffyDefaultServiceEndpoint;
    toggledIcon:               Icon;
    toggledServiceEndpoint:    FluffyToggledServiceEndpoint;
    trackingParams:            string;
    accessibilityData:         ToggledAccessibilityDataClass;
    toggledAccessibilityData:  ToggledAccessibilityDataClass;
    toggleButtonSupportedData: ToggleButtonSupportedData;
}

export interface FluffyDefaultServiceEndpoint {
    clickTrackingParams:    string;
    commandExecutorCommand: IndigoCommandExecutorCommand;
}

export interface IndigoCommandExecutorCommand {
    commands: FriskyCommand[];
}

export interface FriskyCommand {
    clickTrackingParams:  string;
    commandMetadata?:     ContinuationEndpointCommandMetadata;
    likeEndpoint?:        PurpleLikeEndpoint;
    entityUpdateCommand?: ToggledServiceEndpointEntityUpdateCommand;
}

export interface ToggledServiceEndpointEntityUpdateCommand {
    entityBatchUpdate: FluffyEntityBatchUpdate;
}

export interface FluffyEntityBatchUpdate {
    mutations: FluffyMutation[];
}

export interface FluffyMutation {
    entityKey: string;
    type:      string;
    payload:   FluffyPayload;
}

export interface FluffyPayload {
    likeStatusEntity: LikeStatusEntity;
}

export interface LikeStatusEntity {
    key:        string;
    likeStatus: string;
}

export interface PurpleLikeEndpoint {
    status:         IconType;
    target:         AddToPlaylistServiceEndpoint;
    likeParams?:    string;
    dislikeParams?: string;
}

export interface ToggleButtonSupportedData {
    toggleButtonIdData: ToggleButtonIDData;
}

export interface ToggleButtonIDData {
    id: ButtonID;
}

export interface FluffyToggledServiceEndpoint {
    clickTrackingParams:    string;
    commandExecutorCommand: IndecentCommandExecutorCommand;
}

export interface IndecentCommandExecutorCommand {
    commands: ToggledServiceEndpoint[];
}

export interface ToggledServiceEndpoint {
    clickTrackingParams:  string;
    commandMetadata?:     ContinuationEndpointCommandMetadata;
    likeEndpoint?:        FluffyLikeEndpoint;
    entityUpdateCommand?: ToggledServiceEndpointEntityUpdateCommand;
}

export interface FluffyLikeEndpoint {
    status:           Status;
    target:           AddToPlaylistServiceEndpoint;
    removeLikeParams: string;
}

export enum Status {
    Indifferent = "INDIFFERENT",
}

export interface ColorPalette {
    section2Color:       number;
    primaryTitleColor:   number;
    secondaryTitleColor: number;
    section4Color:       number;
}

export interface PlaylistPanelVideoRendererMenu {
    menuRenderer: HilariousMenuRenderer;
}

export interface HilariousMenuRenderer {
    items:          FriskyItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface FriskyItem {
    menuServiceItemRenderer?:         StickyMenuServiceItemRenderer;
    menuServiceItemDownloadRenderer?: ItemMenuServiceItemDownloadRenderer;
}

export interface StickyMenuServiceItemRenderer {
    text:            TitleElement;
    icon:            Icon;
    serviceEndpoint: MischievousServiceEndpoint;
    trackingParams:  string;
    hasSeparator?:   boolean;
}

export interface MischievousServiceEndpoint {
    clickTrackingParams:           string;
    commandMetadata:               ContinuationEndpointCommandMetadata;
    playlistEditEndpoint?:         UntoggledServiceEndpointPlaylistEditEndpoint;
    addToPlaylistServiceEndpoint?: AddToPlaylistServiceEndpoint;
    shareEntityServiceEndpoint?:   ShareEntityServiceEndpoint;
}

export interface PlaylistMenu {
    menuRenderer: AmbitiousMenuRenderer;
}

export interface AmbitiousMenuRenderer {
    items:          MischievousItem[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface MischievousItem {
    toggleMenuServiceItemRenderer: ToggleMenuServiceItemRenderer;
}

export interface ToggleMenuServiceItemRenderer {
    defaultText:            TitleElement;
    defaultIcon:            Icon;
    defaultServiceEndpoint: ToggleMenuServiceItemRendererDefaultServiceEndpoint;
    toggledText:            TitleElement;
    toggledIcon:            Icon;
    toggledServiceEndpoint: ToggleMenuServiceItemRendererDefaultServiceEndpoint;
    trackingParams:         string;
    isToggled:              boolean;
}

export interface ToggleMenuServiceItemRendererDefaultServiceEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    likeEndpoint:        TentacledLikeEndpoint;
}

export interface TentacledLikeEndpoint {
    status: string;
    target: TargetClass;
}

export interface TargetClass {
    playlistId: string;
}

export interface PlaylistButtons {
    menuRenderer: PlaylistButtonsMenuRenderer;
}

export interface PlaylistButtonsMenuRenderer {
    trackingParams:  string;
    topLevelButtons: FluffyTopLevelButton[];
}

export interface FluffyTopLevelButton {
    playlistLoopButtonRenderer?: PlaylistLoopButtonRenderer;
    toggleButtonRenderer?:       TentacledToggleButtonRenderer;
}

export interface PlaylistLoopButtonRenderer {
    states:                     PlaylistLoopButtonRendererState[];
    currentState:               string;
    playlistLoopStateEntityKey: string;
}

export interface PlaylistLoopButtonRendererState {
    playlistLoopButtonStateRenderer: PlaylistLoopButtonStateRenderer;
}

export interface PlaylistLoopButtonStateRenderer {
    state:  string;
    button: ShareButton;
}

export interface TentacledToggleButtonRenderer {
    style:                  ToggledStyleClass;
    size:                   SizeClass;
    isToggled:              boolean;
    isDisabled:             boolean;
    defaultIcon:            Icon;
    defaultServiceEndpoint: ToggleButtonRendererDefaultServiceEndpoint;
    toggledServiceEndpoint: ToggleButtonRendererDefaultServiceEndpoint;
    accessibility:          AccessibilityAccessibility;
    trackingParams:         string;
    defaultTooltip:         string;
    toggledTooltip:         string;
    toggledStyle:           ToggledStyleClass;
}

export interface ToggleButtonRendererDefaultServiceEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       OnUnsubscribeEndpointCommandMetadata;
    signalServiceEndpoint: DefaultServiceEndpointSignalServiceEndpoint;
}

export interface DefaultServiceEndpointSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: MischievousAction[];
}

export interface MischievousAction {
    clickTrackingParams: string;
    openPopupAction:     IndecentOpenPopupAction;
}

export interface IndecentOpenPopupAction {
    popup:     AmbitiousPopup;
    popupType: FluffyPopupType;
}

export interface AmbitiousPopup {
    notificationActionRenderer: FluffyNotificationActionRenderer;
}

export interface FluffyNotificationActionRenderer {
    responseText:   TitleElement;
    trackingParams: string;
}

export interface SizeClass {
    sizeType: SizeEnum;
}

export interface TitleText {
    runs: TitleTextRun[];
}

export interface TitleTextRun {
    text:               string;
    navigationEndpoint: InnertubeCommandClass;
}

export interface TwoColumnWatchNextResultsResults {
    results: ResultsResults;
}

export interface ResultsResults {
    contents:       ResultsContent[];
    trackingParams: string;
}

export interface ResultsContent {
    videoPrimaryInfoRenderer?:   VideoPrimaryInfoRenderer;
    videoSecondaryInfoRenderer?: VideoSecondaryInfoRenderer;
    itemSectionRenderer?:        FluffyItemSectionRenderer;
    ticketShelfRenderer?:        TicketShelfRenderer;
}

export interface FluffyItemSectionRenderer {
    contents:          IndigoContent[];
    trackingParams:    string;
    sectionIdentifier: string;
    targetId?:         string;
}

export interface IndigoContent {
    commentsEntryPointHeaderRenderer?: CommentsEntryPointHeaderRenderer;
    continuationItemRenderer?:         FluffyContinuationItemRenderer;
    messageRenderer?:                  MessageRenderer;
}

export interface CommentsEntryPointHeaderRenderer {
    headerText:      TitleElement;
    onTap:           ShowMoreCommand;
    trackingParams:  string;
    commentCount:    Subtitle;
    contentRenderer: ContentRenderer;
    targetId:        string;
}

export interface ContentRenderer {
    commentsEntryPointTeaserRenderer?: CommentsEntryPointTeaserRenderer;
    commentsSimpleboxRenderer?:        CommentsSimpleboxRenderer;
}

export interface CommentsEntryPointTeaserRenderer {
    teaserAvatar:   Avatar;
    teaserContent:  Subtitle;
    trackingParams: string;
}

export interface Avatar {
    thumbnails:    SourceElement[];
    accessibility: ToggledAccessibilityDataClass;
}

export interface CommentsSimpleboxRenderer {
    simpleboxAvatar:      Avatar;
    simpleboxPlaceholder: TitleElement;
    trackingParams:       string;
}

export interface FluffyContinuationItemRenderer {
    trigger:              Trigger;
    continuationEndpoint: PurpleContinuationEndpoint;
}

export interface MessageRenderer {
    text:           MessageRendererText;
    trackingParams: string;
}

export interface MessageRendererText {
    runs: PurpleRun[];
}

export interface PurpleRun {
    text:                string;
    navigationEndpoint?: HilariousNavigationEndpoint;
}

export interface HilariousNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    urlEndpoint:         CommonConfig;
}

export interface TicketShelfRenderer {
    title:             string;
    events:            Event[];
    trackingParams:    string;
    informationText:   string;
    useCalendarAvatar: boolean;
}

export interface Event {
    ticketEventRenderer: TicketEventRenderer;
}

export interface TicketEventRenderer {
    title:                   string;
    timeMonth:               string;
    timeDay:                 string;
    linkText:                string;
    trackingParams:          string;
    buttonText:              string;
    buttonCommand:           ButtonCommand;
    subtitle1:               string;
    subtitle2:               string;
    timeDate:                string;
    timeTime:                string;
    timeWeekday:             string;
    buttonAccessibilityText: string;
    hasMultipleOffers:       boolean;
}

export interface ButtonCommand {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    urlEndpoint:         ButtonCommandURLEndpoint;
}

export interface ButtonCommandURLEndpoint {
    url:      string;
    target?:  TargetEnum;
    nofollow: boolean;
}

export interface VideoPrimaryInfoRenderer {
    title:                    TitleElement;
    viewCount:                ViewCount;
    videoActions:             VideoActions;
    trackingParams:           string;
    dateText:                 Subtitle;
    relativeDateText?:        ShortViewCountText;
    superTitleLink?:          SuperTitleLink;
    updatedMetadataEndpoint?: VideoPrimaryInfoRendererUpdatedMetadataEndpoint;
}

export interface SuperTitleLink {
    runs: SuperTitleLinkRun[];
}

export interface SuperTitleLinkRun {
    text:                string;
    navigationEndpoint?: AmbitiousNavigationEndpoint;
    loggingDirectives?:  ReelItemRendererLoggingDirectives;
}

export interface AmbitiousNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    browseEndpoint:      CommandBrowseEndpoint;
    trackingParams:      string;
}

export interface VideoPrimaryInfoRendererUpdatedMetadataEndpoint {
    clickTrackingParams:     string;
    commandMetadata:         ContinuationEndpointCommandMetadata;
    updatedMetadataEndpoint: UpdatedMetadataEndpointUpdatedMetadataEndpoint;
}

export interface UpdatedMetadataEndpointUpdatedMetadataEndpoint {
    videoId:        string;
    initialDelayMs: number;
}

export interface VideoActions {
    menuRenderer: VideoActionsMenuRenderer;
}

export interface VideoActionsMenuRenderer {
    items:           BraggadociousItem[];
    trackingParams:  string;
    topLevelButtons: TentacledTopLevelButton[];
    accessibility:   ToggledAccessibilityDataClass;
    flexibleItems:   FlexibleItem[];
}

export interface FlexibleItem {
    menuFlexibleItemRenderer: MenuFlexibleItemRenderer;
}

export interface MenuFlexibleItemRenderer {
    menuItem:       MenuItem;
    topLevelButton: MenuFlexibleItemRendererTopLevelButton;
}

export interface MenuItem {
    menuServiceItemDownloadRenderer?: MenuItemMenuServiceItemDownloadRenderer;
    menuServiceItemRenderer?:         MenuItemMenuServiceItemRenderer;
}

export interface MenuItemMenuServiceItemDownloadRenderer {
    serviceEndpoint: BraggadociousServiceEndpoint;
    trackingParams:  string;
}

export interface BraggadociousServiceEndpoint {
    clickTrackingParams:  string;
    offlineVideoEndpoint: FluffyOfflineVideoEndpoint;
}

export interface FluffyOfflineVideoEndpoint {
    videoId:      string;
    onAddCommand: FluffyOnAddCommand;
}

export interface FluffyOnAddCommand {
    clickTrackingParams:      string;
    getDownloadActionCommand: FluffyGetDownloadActionCommand;
}

export interface FluffyGetDownloadActionCommand {
    videoId:                 string;
    params:                  FluffyParams;
    offlineabilityEntityKey: string;
}

export enum FluffyParams {
    CAE3D = "CAE%3D",
}

export interface MenuItemMenuServiceItemRenderer {
    text:            TitleElement;
    icon:            Icon;
    serviceEndpoint: MenuServiceItemRendererCommand;
    trackingParams:  string;
    isDisabled?:     boolean;
}

export interface MenuServiceItemRendererCommand {
    clickTrackingParams:                    string;
    commandMetadata?:                       FluffyCommandMetadata;
    getPdgBuyFlowCommand?:                  GetTranscriptEndpoint;
    changeEngagementPanelVisibilityAction?: ChangeEngagementPanelVisibilityAction;
    addToPlaylistServiceEndpoint?:          AddToPlaylistServiceEndpoint;
    modalEndpoint?:                         ServiceEndpointModalEndpoint;
}

export interface FluffyCommandMetadata {
    webCommandMetadata: IndecentWebCommandMetadata;
}

export interface IndecentWebCommandMetadata {
    sendPost?:         boolean;
    apiUrl?:           APIURL;
    ignoreNavigation?: boolean;
}

export interface ServiceEndpointModalEndpoint {
    modal: FluffyModal;
}

export interface FluffyModal {
    modalWithTitleAndButtonRenderer: FluffyModalWithTitleAndButtonRenderer;
}

export interface FluffyModalWithTitleAndButtonRenderer {
    title:   TitleElement;
    content: TitleElement;
    button:  ModalWithTitleAndButtonRendererCancelButton;
}

export interface MenuFlexibleItemRendererTopLevelButton {
    downloadButtonRenderer?: DownloadButtonRenderer;
    buttonRenderer?:         MagentaButtonRenderer;
}

export interface MagentaButtonRenderer {
    style:             StyleTypeEnum;
    size:              SizeEnum;
    isDisabled:        boolean;
    text:              TitleElement;
    serviceEndpoint?:  ServiceEndpoint1;
    icon:              Icon;
    tooltip:           FluffyTooltip;
    trackingParams:    string;
    accessibilityData: ToggledAccessibilityDataClass;
    targetId?:         string;
    command?:          MenuServiceItemRendererCommand;
    accessibility?:    AccessibilityAccessibility;
}

export interface ServiceEndpoint1 {
    clickTrackingParams:  string;
    commandMetadata:      ContinuationEndpointCommandMetadata;
    getPdgBuyFlowCommand: GetTranscriptEndpoint;
}

export enum FluffyTooltip {
    Clip = "Clip",
    Save = "Save",
    ShowSupportWithSuperThanks = "Show support with Super Thanks",
}

export interface DownloadButtonRenderer {
    trackingParams: string;
    style:          StyleTypeEnum;
    size:           SizeEnum;
    targetId:       string;
    command:        DownloadButtonRendererCommand;
}

export interface DownloadButtonRendererCommand {
    clickTrackingParams:  string;
    offlineVideoEndpoint: CommandOfflineVideoEndpoint;
}

export interface CommandOfflineVideoEndpoint {
    videoId:      string;
    onAddCommand: FluffyOnAddCommand;
    action:       string;
}

export interface BraggadociousItem {
    menuServiceItemRenderer?:    FluffyMenuItemRenderer;
    menuNavigationItemRenderer?: FluffyMenuItemRenderer;
}

export interface TentacledTopLevelButton {
    segmentedLikeDislikeButtonRenderer?: SegmentedLikeDislikeButtonRenderer;
    buttonRenderer?:                     InformationButtonButtonRenderer;
}

export interface SegmentedLikeDislikeButtonRenderer {
    likeButton:    LikeButton;
    dislikeButton: DislikeButton;
    likeCount:     string;
}

export interface DislikeButton {
    toggleButtonRenderer: DislikeButtonToggleButtonRenderer;
}

export interface DislikeButtonToggleButtonRenderer {
    style:                      ToggledStyleClass;
    isToggled:                  boolean;
    isDisabled:                 boolean;
    defaultIcon:                Icon;
    defaultServiceEndpoint?:    TentacledDefaultServiceEndpoint;
    toggledServiceEndpoint?:    ToggledServiceEndpoint;
    accessibility:              AccessibilityAccessibility;
    trackingParams:             string;
    defaultTooltip:             string;
    toggledTooltip:             string;
    toggledStyle:               ToggledStyleClass;
    accessibilityData:          ToggledAccessibilityDataClass;
    toggleButtonSupportedData:  ToggleButtonSupportedData;
    targetId:                   string;
    defaultNavigationEndpoint?: PurpleDefaultNavigationEndpoint;
}

export interface PurpleDefaultNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     DefaultNavigationEndpointCommandMetadata;
    modalEndpoint:       FluffyModalEndpoint;
}

export interface FluffyModalEndpoint {
    modal: TentacledModal;
}

export interface TentacledModal {
    modalWithTitleAndButtonRenderer: TentacledModalWithTitleAndButtonRenderer;
}

export interface TentacledModalWithTitleAndButtonRenderer {
    title:   Subtitle;
    content: Subtitle;
    button:  ModalWithTitleAndButtonRendererCancelButton;
}

export interface TentacledDefaultServiceEndpoint {
    clickTrackingParams:    string;
    commandExecutorCommand: HilariousCommandExecutorCommand;
}

export interface HilariousCommandExecutorCommand {
    commands: MischievousCommand[];
}

export interface MischievousCommand {
    clickTrackingParams:             string;
    updateToggleButtonStateCommand?: UpdateToggleButtonStateCommand;
    commandMetadata?:                ContinuationEndpointCommandMetadata;
    likeEndpoint?:                   PurpleLikeEndpoint;
}

export interface LikeButton {
    toggleButtonRenderer: LikeButtonToggleButtonRenderer;
}

export interface LikeButtonToggleButtonRenderer {
    style:                      ToggledStyleClass;
    isToggled:                  boolean;
    isDisabled:                 boolean;
    defaultIcon:                Icon;
    defaultText:                ShortViewCountText;
    defaultServiceEndpoint?:    TentacledDefaultServiceEndpoint;
    toggledText:                ShortViewCountText;
    toggledServiceEndpoint?:    ToggledServiceEndpoint;
    accessibility:              AccessibilityAccessibility;
    trackingParams:             string;
    defaultTooltip:             string;
    toggledTooltip:             string;
    toggledStyle:               ToggledStyleClass;
    accessibilityData:          ToggledAccessibilityDataClass;
    toggleButtonSupportedData:  ToggleButtonSupportedData;
    targetId:                   string;
    defaultNavigationEndpoint?: PurpleDefaultNavigationEndpoint;
}

export interface ViewCount {
    videoViewCountRenderer: VideoViewCountRenderer;
}

export interface VideoViewCountRenderer {
    viewCount:                Subtitle;
    shortViewCount?:          Subtitle;
    originalViewCount:        string;
    isLive?:                  boolean;
    extraShortViewCount?:     ShortViewCountText;
    unlabeledViewCountValue?: Subtitle;
}

export interface VideoSecondaryInfoRenderer {
    owner:                     VideoSecondaryInfoRendererOwner;
    subscribeButton:           SubscribeButton;
    metadataRowContainer:      MetadataRowContainer;
    showMoreText:              Subtitle;
    showLessText:              Subtitle;
    trackingParams:            string;
    defaultExpanded:           boolean;
    descriptionCollapsedLines: number;
    showMoreCommand:           ShowMoreCommand;
    showLessCommand:           ShowLessCommandClass;
    attributedDescription:     AttributedDescription;
}

export interface AttributedDescription {
    content:                    string;
    commandRuns?:               AttributedDescriptionCommandRun[];
    styleRuns?:                 AttributedDescriptionStyleRun[];
    attachmentRuns?:            AttachmentRun[];
    decorationRuns?:            DecorationRun[];
    androidIncludeFontPadding?: boolean;
}

export interface AttachmentRun {
    startIndex: number;
    length:     number;
    element:    Element;
    alignment:  string;
}

export interface Element {
    type:       TypeClass;
    properties: Properties;
}

export interface Properties {
    layoutProperties: LayoutProperties;
}

export interface LayoutProperties {
    height:  Height;
    width:   Height;
    padding: Padding;
}

export interface Height {
    value: number;
    unit:  Unit;
}

export enum Unit {
    DimensionUnitPoint = "DIMENSION_UNIT_POINT",
}

export interface Padding {
    top: Height;
}

export interface TypeClass {
    imageType: ImageType;
}

export interface ImageType {
    image: ImageTypeImage;
}

export interface ImageTypeImage {
    sources: CommonConfig[];
}

export interface AttributedDescriptionCommandRun {
    startIndex:         number;
    length:             number;
    onTap:              PurpleOnTap;
    loggingDirectives?: CommandRunLoggingDirectives;
}

export interface CommandRunLoggingDirectives {
    enableDisplayloggerExperiment: boolean;
}

export interface PurpleOnTap {
    innertubeCommand: PurpleInnertubeCommand;
}

export interface PurpleInnertubeCommand {
    clickTrackingParams?: string;
    commandMetadata:      InlinePlaybackEndpointCommandMetadata;
    urlEndpoint?:         ButtonCommandURLEndpoint;
    watchEndpoint?:       PurpleWatchEndpoint;
    browseEndpoint?:      CommandBrowseEndpoint;
}

export interface DecorationRun {
    textDecorator: TextDecorator;
}

export interface TextDecorator {
    highlightTextDecorator: HighlightTextDecorator;
}

export interface HighlightTextDecorator {
    startIndex:                       number;
    length:                           number;
    backgroundCornerRadius:           number;
    bottomPadding:                    number;
    highlightTextDecoratorExtensions: HighlightTextDecoratorExtensions;
}

export interface HighlightTextDecoratorExtensions {
    highlightTextDecoratorColorMapExtension: ColorMapExtension;
}

export interface ColorMapExtension {
    colorMap: ColorMap[];
}

export interface ColorMap {
    key:   Key;
    value: number;
}

export enum Key {
    UserInterfaceThemeDark = "USER_INTERFACE_THEME_DARK",
    UserInterfaceThemeLight = "USER_INTERFACE_THEME_LIGHT",
}

export interface AttributedDescriptionStyleRun {
    startIndex:         number;
    length:             number;
    styleRunExtensions: StyleRunExtensions;
}

export interface StyleRunExtensions {
    styleRunColorMapExtension: ColorMapExtension;
}

export interface MetadataRowContainer {
    metadataRowContainerRenderer: MetadataRowContainerRenderer;
}

export interface MetadataRowContainerRenderer {
    collapsedItemCount: number;
    trackingParams:     string;
    rows?:              Row[];
}

export interface Row {
    metadataRowRenderer?:     MetadataRowRenderer;
    richMetadataRowRenderer?: RichMetadataRowRenderer;
}

export interface MetadataRowRenderer {
    title:          TitleElement;
    contents:       Subtitle[];
    trackingParams: string;
}

export interface RichMetadataRowRenderer {
    contents:       RichMetadataRowRendererContent[];
    trackingParams: string;
}

export interface RichMetadataRowRendererContent {
    richMetadataRenderer: RichMetadataRenderer;
}

export interface RichMetadataRenderer {
    style:            string;
    thumbnail:        BackgroundElement;
    title:            Stat;
    subtitle?:        Subtitle;
    callToAction:     TitleElement;
    callToActionIcon: Icon;
    endpoint:         InnertubeCommandClass;
    trackingParams:   string;
}

export interface VideoSecondaryInfoRendererOwner {
    videoOwnerRenderer: VideoOwnerRenderer;
}

export interface VideoOwnerRenderer {
    thumbnail:           BackgroundElement;
    title:               LongBylineText;
    subscriptionButton:  SubscriptionButton;
    navigationEndpoint:  ChannelNavigationEndpointClass;
    subscriberCountText: ShortViewCountText;
    trackingParams:      string;
    badges?:             OwnerBadgeElement[];
    membershipButton?:   MembershipButtonClass;
}

export interface MembershipButtonClass {
    buttonRenderer: MembershipButtonButtonRenderer;
}

export interface MembershipButtonButtonRenderer {
    style:               string;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                TitleElement;
    navigationEndpoint?: CunningNavigationEndpoint;
    trackingParams:      string;
    accessibilityData?:  ToggledAccessibilityDataClass;
    targetId?:           string;
}

export interface CunningNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     TentacledCommandMetadata;
    modalEndpoint?:      PurpleModalEndpoint;
    signInEndpoint?:     TentacledSignInEndpoint;
}

export interface TentacledCommandMetadata {
    webCommandMetadata: HilariousWebCommandMetadata;
}

export interface HilariousWebCommandMetadata {
    ignoreNavigation?: boolean;
    url?:              string;
    webPageType?:      WebPageType;
    rootVe?:           number;
}

export interface TentacledSignInEndpoint {
    nextEndpoint: InnertubeCommandClass;
}

export interface SubscriptionButton {
    type:        string;
    subscribed?: boolean;
}

export interface ShowLessCommandClass {
    clickTrackingParams:                   string;
    changeEngagementPanelVisibilityAction: ChangeEngagementPanelVisibilityAction;
}

export interface SubscribeButton {
    subscribeButtonRenderer: SubscribeButtonRenderer;
}

export interface SubscribeButtonRenderer {
    buttonText:                   TitleElement;
    subscribed:                   boolean;
    enabled:                      boolean;
    type:                         string;
    channelId:                    string;
    showPreferences:              boolean;
    subscribedButtonText:         TitleElement;
    unsubscribedButtonText:       TitleElement;
    trackingParams:               string;
    unsubscribeButtonText:        TitleElement;
    subscribeAccessibility:       ToggledAccessibilityDataClass;
    unsubscribeAccessibility:     ToggledAccessibilityDataClass;
    notificationPreferenceButton: NotificationPreferenceButton;
    targetId:                     string;
    subscribedEntityKey:          string;
    onSubscribeEndpoints:         OnSubscribeEndpoint[];
    onUnsubscribeEndpoints:       OnUnsubscribeEndpoint[];
    signInEndpoint?:              SubscribeButtonRendererSignInEndpoint;
}

export interface NotificationPreferenceButton {
    subscriptionNotificationToggleButtonRenderer: SubscriptionNotificationToggleButtonRenderer;
}

export interface SubscriptionNotificationToggleButtonRenderer {
    states:         SubscriptionNotificationToggleButtonRendererState[];
    currentStateId: number;
    trackingParams: string;
    command:        SubscriptionNotificationToggleButtonRendererCommand;
    targetId:       string;
    secondaryIcon:  Icon;
}

export interface SubscriptionNotificationToggleButtonRendererCommand {
    clickTrackingParams:    string;
    commandExecutorCommand: AmbitiousCommandExecutorCommand;
}

export interface AmbitiousCommandExecutorCommand {
    commands: BraggadociousCommand[];
}

export interface BraggadociousCommand {
    clickTrackingParams: string;
    openPopupAction:     HilariousOpenPopupAction;
}

export interface HilariousOpenPopupAction {
    popup:     CunningPopup;
    popupType: TentacledPopupType;
}

export interface CunningPopup {
    menuPopupRenderer: MenuPopupRenderer;
}

export interface MenuPopupRenderer {
    items: MenuPopupRendererItem[];
}

export interface MenuPopupRendererItem {
    menuServiceItemRenderer: IndigoMenuServiceItemRenderer;
}

export interface IndigoMenuServiceItemRenderer {
    text:            Stat;
    icon:            Icon;
    serviceEndpoint: ServiceEndpoint2;
    trackingParams:  string;
    isSelected?:     boolean;
}

export interface ServiceEndpoint2 {
    clickTrackingParams:                          string;
    commandMetadata:                              ContinuationEndpointCommandMetadata;
    modifyChannelNotificationPreferenceEndpoint?: GetTranscriptEndpoint;
    signalServiceEndpoint?:                       OnUnsubscribeEndpointSignalServiceEndpoint;
}

export interface OnUnsubscribeEndpointSignalServiceEndpoint {
    signal:  PurpleSignal;
    actions: BraggadociousAction[];
}

export interface BraggadociousAction {
    clickTrackingParams: string;
    openPopupAction:     AmbitiousOpenPopupAction;
}

export interface AmbitiousOpenPopupAction {
    popup:     MagentaPopup;
    popupType: PurplePopupType;
}

export interface MagentaPopup {
    confirmDialogRenderer: StickyConfirmDialogRenderer;
}

export interface StickyConfirmDialogRenderer {
    trackingParams:  string;
    dialogMessages:  TitleElement[];
    confirmButton:   A11YSkipNavigationButtonClass;
    cancelButton:    A11YSkipNavigationButtonClass;
    primaryIsCancel: boolean;
}

export enum TentacledPopupType {
    Dropdown = "DROPDOWN",
}

export interface SubscriptionNotificationToggleButtonRendererState {
    stateId:     number;
    nextStateId: number;
    state:       ShareButton;
}

export interface OnSubscribeEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    subscribeEndpoint:   SubscribeEndpoint;
}

export interface OnUnsubscribeEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       OnUnsubscribeEndpointCommandMetadata;
    signalServiceEndpoint: OnUnsubscribeEndpointSignalServiceEndpoint;
}

export interface SubscribeButtonRendererSignInEndpoint {
    clickTrackingParams: string;
    commandMetadata:     DefaultNavigationEndpointCommandMetadata;
    modalEndpoint:       SignInEndpointModalEndpoint;
}

export interface SignInEndpointModalEndpoint {
    modal: StickyModal;
}

export interface StickyModal {
    modalWithTitleAndButtonRenderer: StickyModalWithTitleAndButtonRenderer;
}

export interface StickyModalWithTitleAndButtonRenderer {
    title:   Subtitle;
    content: Subtitle;
    button:  TentacledButton;
}

export interface TentacledButton {
    buttonRenderer: FriskyButtonRenderer;
}

export interface FriskyButtonRenderer {
    style:               StyleTypeEnum;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                Subtitle;
    navigationEndpoint?: MagentaNavigationEndpoint;
    trackingParams:      string;
    command?:            StickyCommand;
}

export interface MagentaNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    signInEndpoint:      StickySignInEndpoint;
}

export interface StickySignInEndpoint {
    nextEndpoint:   NavigationEndpoint;
    continueAction: string;
    idamTag:        string;
}

export interface TwoColumnWatchNextResultsSecondaryResults {
    secondaryResults: SecondaryResultsSecondaryResults;
}

export interface SecondaryResultsSecondaryResults {
    results:        SecondaryResultsResult[];
    trackingParams: string;
    continuations?: unknown[];
    targetId?:      PanelIdentifierEnum;
}

export interface SecondaryResultsResult {
    relatedChipCloudRenderer?: RelatedChipCloudRenderer;
    itemSectionRenderer?:      ResultItemSectionRenderer;
    adSlotRenderer?:           ContentAdSlotRenderer;
    compactVideoRenderer?:     ResultCompactVideoRenderer;
    continuationItemRenderer?: ResultContinuationItemRenderer;
}

export interface ResultCompactVideoRenderer {
    videoId:            string;
    thumbnail:          BackgroundElement;
    title:              ShortViewCountText;
    longBylineText:     LongBylineText;
    publishedTimeText?: Subtitle;
    viewCountText:      Stat;
    lengthText?:        ShortViewCountText;
    navigationEndpoint: ReelItemRendererNavigationEndpoint;
    shortBylineText:    LongBylineText;
    badges:             AdBadgeElement[];
    channelThumbnail:   BackgroundElement;
    ownerBadges?:       OwnerBadgeElement[];
    trackingParams:     string;
    shortViewCountText: ShortViewCountTextClass;
    menu:               CompactVideoRendererMenu;
    thumbnailOverlays:  CompactVideoRendererThumbnailOverlay[];
    accessibility:      ToggledAccessibilityDataClass;
    richThumbnail:      RichThumbnail;
}

export interface ResultItemSectionRenderer {
    contents:          RelatedChipCommandContent[];
    trackingParams:    string;
    sectionIdentifier: string;
    targetId:          PanelIdentifierEnum;
}

export interface RelatedChipCloudRenderer {
    content:            RelatedChipCloudRendererContent;
    showProminentChips: boolean;
}

export interface RelatedChipCloudRendererContent {
    chipCloudRenderer: ChipCloudRenderer;
}

export interface ChipCloudRenderer {
    chips:                Chip[];
    trackingParams:       string;
    horizontalScrollable: boolean;
    nextButton:           CloseButtonClass;
    previousButton:       CloseButtonClass;
}

export interface Chip {
    chipCloudChipRenderer: ChipChipCloudChipRenderer;
}

export interface ChipChipCloudChipRenderer {
    style:              ToggledStyleClass;
    text:               Subtitle;
    navigationEndpoint: ChipCloudChipRendererServiceEndpoint;
    trackingParams:     string;
    isSelected:         boolean;
}

export interface CloseButtonClass {
    buttonRenderer: CloseButtonButtonRenderer;
}

export interface CloseButtonButtonRenderer {
    style:          StyleTypeEnum;
    size:           SizeEnum;
    isDisabled:     boolean;
    icon:           Icon;
    accessibility:  AccessibilityAccessibility;
    trackingParams: string;
}

export interface EngagementPanel {
    engagementPanelSectionListRenderer: EngagementPanelSectionListRenderer;
}

export interface EngagementPanelSectionListRenderer {
    content:           EngagementPanelSectionListRendererContent;
    targetId:          PanelIdentifier;
    visibility:        VisibilityEnum;
    loggingDirectives: ReelItemRendererLoggingDirectives;
    panelIdentifier?:  PanelIdentifier;
    header?:           EngagementPanelSectionListRendererHeader;
    onShowCommands?:   OnShowCommandElement[];
    veType?:           number;
}

export interface EngagementPanelSectionListRendererContent {
    adsEngagementPanelContentRenderer?:    AdsEngagementPanelContentRenderer;
    clipSectionRenderer?:                  ClipSectionRenderer;
    structuredDescriptionContentRenderer?: StructuredDescriptionContentRenderer;
    sectionListRenderer?:                  FluffySectionListRenderer;
    continuationItemRenderer?:             TentacledContinuationItemRenderer;
    macroMarkersListRenderer?:             MacroMarkersListRenderer;
}

export interface ClipSectionRenderer {
    contents: ClipSectionRendererContent[];
}

export interface ClipSectionRendererContent {
    clipCreationRenderer: ClipCreationRenderer;
}

export interface ClipCreationRenderer {
    trackingParams:     string;
    userAvatar:         BackgroundElement;
    titleInput:         TitleInput;
    scrubber:           Scrubber;
    saveButton:         A11YSkipNavigationButtonClass;
    displayName:        Subtitle;
    publicityLabel:     string;
    cancelButton:       A11YSkipNavigationButtonClass;
    adStateOverlay:     AdStateOverlay;
    externalVideoId:    string;
    publicityLabelIcon: string;
}

export interface AdStateOverlay {
    clipAdStateRenderer: ClipAdStateRenderer;
}

export interface ClipAdStateRenderer {
    title: TitleElement;
    body:  TitleElement;
}

export interface Scrubber {
    clipCreationScrubberRenderer: ClipCreationScrubberRenderer;
}

export interface ClipCreationScrubberRenderer {
    lengthTemplate:        string;
    maxLengthMs:           number;
    minLengthMs:           number;
    defaultLengthMs:       number;
    windowSizeMs:          number;
    startAccessibility:    ToggledAccessibilityDataClass;
    endAccessibility:      ToggledAccessibilityDataClass;
    durationAccessibility: ToggledAccessibilityDataClass;
}

export interface TitleInput {
    clipCreationTextInputRenderer: ClipCreationTextInputRenderer;
}

export interface ClipCreationTextInputRenderer {
    placeholderText:   TitleElement;
    maxCharacterLimit: number;
}

export interface TentacledContinuationItemRenderer {
    trigger:              Trigger;
    continuationEndpoint: FluffyContinuationEndpoint;
}

export interface FluffyContinuationEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       ContinuationEndpointCommandMetadata;
    getTranscriptEndpoint: GetTranscriptEndpoint;
}

export interface MacroMarkersListRenderer {
    contents:        MacroMarkersListRendererContent[];
    syncButtonLabel: TitleElement;
    trackingParams:  string;
}

export interface MacroMarkersListRendererContent {
    macroMarkersListItemRenderer: ContentMacroMarkersListItemRenderer;
}

export interface ContentMacroMarkersListItemRenderer {
    title:                           Subtitle;
    timeDescription:                 Subtitle;
    thumbnail:                       BackgroundElement;
    onTap:                           OnTap;
    trackingParams:                  string;
    shareButton:                     MacroMarkersListItemRendererShareButton;
    repeatButton:                    RepeatButton;
    macroMarkerRepeatStateEntityKey: string;
    endRepeatCommand:                EndRepeatCommand;
    playerStateEntityKey:            string;
    carouselType:                    string;
    timeDescriptionA11yLabel:        string;
}

export interface EndRepeatCommand {
    clickTrackingParams:    string;
    commandExecutorCommand: EndRepeatCommandCommandExecutorCommand;
}

export interface EndRepeatCommandCommandExecutorCommand {
    commands: Command1[];
}

export interface Command1 {
    clickTrackingParams:   string;
    entityUpdateCommand?:  FluffyEntityUpdateCommand;
    repeatChapterCommand?: CommandRepeatChapterCommand;
}

export interface FluffyEntityUpdateCommand {
    entityBatchUpdate: TentacledEntityBatchUpdate;
}

export interface TentacledEntityBatchUpdate {
    mutations: TentacledMutation[];
}

export interface TentacledMutation {
    entityKey: string;
    type:      TypeEnum;
}

export enum TypeEnum {
    EntityMutationTypeDelete = "ENTITY_MUTATION_TYPE_DELETE",
}

export interface RepeatButton {
    toggleButtonRenderer: RepeatButtonToggleButtonRenderer;
}

export interface RepeatButtonToggleButtonRenderer {
    style:                    ToggledStyleClass;
    isToggled:                boolean;
    isDisabled:               boolean;
    defaultIcon:              Icon;
    defaultServiceEndpoint:   StickyDefaultServiceEndpoint;
    toggledServiceEndpoint:   EndRepeatCommand;
    trackingParams:           string;
    toggledStyle:             ToggledStyleClass;
    accessibilityData:        ToggledAccessibilityDataClass;
    toggledAccessibilityData: ToggledAccessibilityDataClass;
}

export interface StickyDefaultServiceEndpoint {
    clickTrackingParams:  string;
    repeatChapterCommand: DefaultServiceEndpointRepeatChapterCommand;
}

export interface DefaultServiceEndpointRepeatChapterCommand {
    repeat:               string;
    startTimeMs:          string;
    endTimeMs:            string;
    repeatStateEntityKey: string;
}

export interface MacroMarkersListItemRendererShareButton {
    buttonRenderer: MischievousButtonRenderer;
}

export interface MischievousButtonRenderer {
    style:             StyleTypeEnum;
    icon:              Icon;
    trackingParams:    string;
    accessibilityData: ToggledAccessibilityDataClass;
    command:           MagentaServiceEndpoint;
}

export interface FluffySectionListRenderer {
    contents:       IndecentContent[];
    trackingParams: string;
}

export interface IndecentContent {
    itemSectionRenderer: TentacledItemSectionRenderer;
}

export interface TentacledItemSectionRenderer {
    contents:          HilariousContent[];
    trackingParams:    string;
    sectionIdentifier: PanelIdentifier;
    targetId:          PanelIdentifierEnum;
}

export interface HilariousContent {
    continuationItemRenderer: FluffyContinuationItemRenderer;
}

export interface StructuredDescriptionContentRenderer {
    items: StructuredDescriptionContentRendererItem[];
}

export interface StructuredDescriptionContentRendererItem {
    videoDescriptionHeaderRenderer?:            VideoDescriptionHeaderRenderer;
    expandableVideoDescriptionBodyRenderer?:    ExpandableVideoDescriptionBodyRenderer;
    horizontalCardListRenderer?:                HorizontalCardListRenderer;
    reelShelfRenderer?:                         ReelShelfRenderer;
    videoDescriptionTranscriptSectionRenderer?: VideoDescriptionTranscriptSectionRenderer;
    videoDescriptionInfocardsSectionRenderer?:  VideoDescriptionInfocardsSectionRenderer;
    videoDescriptionCourseSectionRenderer?:     VideoDescriptionCourseSectionRenderer;
}

export interface ExpandableVideoDescriptionBodyRenderer {
    showMoreText:                  Subtitle;
    showLessText:                  Subtitle;
    attributedDescriptionBodyText: AttributedDescription;
}

export interface HorizontalCardListRenderer {
    cards:          Card[];
    trackingParams: string;
    header:         HorizontalCardListRendererHeader;
    style:          HorizontalCardListRendererStyle;
    footerButton?:  FooterButton;
    centerItems?:   boolean;
}

export interface Card {
    videoAttributeViewModel?:      VideoAttributeViewModel;
    macroMarkersListItemRenderer?: CardMacroMarkersListItemRenderer;
}

export interface CardMacroMarkersListItemRenderer {
    title:           Subtitle;
    timeDescription: Subtitle;
    thumbnail:       BackgroundElement;
    onTap:           OnTap;
    trackingParams:  string;
    layout:          string;
    carouselType:    string;
}

export interface VideoAttributeViewModel {
    image:                 ImageTypeImage;
    imageStyle:            string;
    title:                 string;
    subtitle:              string;
    secondarySubtitle:     SecondarySubtitle;
    orientation:           string;
    onTap?:                VideoAttributeViewModelOnTap;
    sizingRule:            string;
    overflowMenuOnTap:     OverflowMenuOnTap;
    overflowMenuA11yLabel: string;
    loggingDirectives:     ReelItemRendererLoggingDirectives;
}

export interface VideoAttributeViewModelOnTap {
    innertubeCommand: NavigationEndpoint;
}

export interface OverflowMenuOnTap {
    innertubeCommand: OverflowMenuOnTapInnertubeCommand;
}

export interface OverflowMenuOnTapInnertubeCommand {
    clickTrackingParams:   string;
    commandMetadata:       DefaultNavigationEndpointCommandMetadata;
    confirmDialogEndpoint: ConfirmDialogEndpoint;
}

export interface ConfirmDialogEndpoint {
    content: ConfirmDialogEndpointContent;
}

export interface ConfirmDialogEndpointContent {
    confirmDialogRenderer: ContentConfirmDialogRenderer;
}

export interface ContentConfirmDialogRenderer {
    title:           TitleElement;
    trackingParams:  string;
    dialogMessages:  ThumbnailText[];
    confirmButton:   MembershipButtonClass;
    primaryIsCancel: boolean;
}

export interface SecondarySubtitle {
    content:      string;
    commandRuns?: SecondarySubtitleCommandRun[];
    styleRuns?:   SecondarySubtitleStyleRun[];
}

export interface SecondarySubtitleCommandRun {
    startIndex: number;
    length:     number;
    onTap:      FluffyOnTap;
}

export interface FluffyOnTap {
    innertubeCommand: FluffyInnertubeCommand;
}

export interface FluffyInnertubeCommand {
    clickTrackingParams:   string;
    commandMetadata:       InlinePlaybackEndpointCommandMetadata;
    watchPlaylistEndpoint: TargetClass;
}

export interface SecondarySubtitleStyleRun {
    startIndex: number;
    length:     number;
    fontColor:  number;
}

export interface FooterButton {
    buttonViewModel: ButtonViewModel;
}

export interface ButtonViewModel {
    iconName:       string;
    onTap:          ButtonViewModelOnTap;
    style:          string;
    trackingParams: string;
    type:           string;
    buttonSize:     string;
    titleFormatted: BodyText;
}

export interface ButtonViewModelOnTap {
    innertubeCommand: InnertubeCommandClass;
}

export interface BodyText {
    content: PageTitle;
}

export enum PageTitle {
    Live = "Live",
    Music = "Music",
    PlayingAt2XSpeed = "Playing at 2x speed",
}

export interface HorizontalCardListRendererHeader {
    richListHeaderRenderer: RichListHeaderRenderer;
}

export interface RichListHeaderRenderer {
    title:             Subtitle;
    subtitle?:         Subtitle;
    trackingParams:    string;
    navigationButton?: NavigationButtonElement;
}

export interface HorizontalCardListRendererStyle {
    type: string;
}

export interface VideoDescriptionCourseSectionRenderer {
    sectionTitle: TitleElement;
    mediaLockups: MediaLockup[];
}

export interface MediaLockup {
    structuredDescriptionPlaylistLockupRenderer: StructuredDescriptionPlaylistLockupRenderer;
}

export interface StructuredDescriptionPlaylistLockupRenderer {
    thumbnail:               BackgroundElement;
    title:                   Subtitle;
    shortBylineText:         Subtitle;
    videoCountShortText:     TitleElement;
    navigationEndpoint:      InnertubeCommandClass;
    trackingParams:          string;
    thumbnailWidth:          number;
    aspectRatio:             number;
    maxLinesTitle:           number;
    maxLinesShortBylineText: number;
    overlayPosition:         string;
}

export interface VideoDescriptionHeaderRenderer {
    title:                     TitleElement;
    channel:                   Subtitle;
    views:                     Stat;
    publishDate:               Subtitle;
    factoid?:                  FactoidElement[];
    channelNavigationEndpoint: ChannelNavigationEndpointClass;
    channelThumbnail:          Channel;
}

export interface FactoidElement {
    factoidRenderer?:          FactoidRenderer;
    viewCountFactoidRenderer?: ViewCountFactoidRenderer;
}

export interface FactoidRenderer {
    value:             Subtitle;
    label:             Subtitle;
    accessibilityText: string;
}

export interface ViewCountFactoidRenderer {
    viewCountEntityKey: string;
    factoid:            ViewCountFactoidRendererFactoid;
    viewCountType:      string;
}

export interface ViewCountFactoidRendererFactoid {
    factoidRenderer: FactoidRenderer;
}

export interface VideoDescriptionInfocardsSectionRenderer {
    sectionTitle:        Subtitle;
    creatorVideosButton: PlayButtonClass;
    creatorAboutButton:  PlayButtonClass;
    sectionSubtitle:     ShortViewCountText;
    channelAvatar:       Channel;
    channelEndpoint:     ChannelNavigationEndpointClass;
    trackingParams:      string;
}

export interface PlayButtonClass {
    buttonRenderer: PlayButtonButtonRenderer;
}

export interface PlayButtonButtonRenderer {
    style:               StickyStyle;
    size:                SizeEnum;
    isDisabled:          boolean;
    text:                Subtitle;
    icon:                Icon;
    trackingParams:      string;
    command?:            EndpointClass;
    navigationEndpoint?: CurrentVideoEndpoint;
}

export enum StickyStyle {
    StyleInactiveOutline = "STYLE_INACTIVE_OUTLINE",
    StyleMonoFilledOverlay = "STYLE_MONO_FILLED_OVERLAY",
    StyleMonoTonalOverlay = "STYLE_MONO_TONAL_OVERLAY",
}

export interface VideoDescriptionTranscriptSectionRenderer {
    sectionTitle:   TitleElement;
    subHeaderText:  TitleElement;
    primaryButton:  A11YSkipNavigationButtonClass;
    trackingParams: string;
}

export interface EngagementPanelSectionListRendererHeader {
    engagementPanelTitleHeaderRenderer: EngagementPanelTitleHeaderRenderer;
}

export interface EngagementPanelTitleHeaderRenderer {
    title:              Stat;
    informationButton?: ShareButton;
    visibilityButton:   VoiceSearchButtonClass;
    trackingParams:     string;
    contextualInfo?:    TitleElement;
    menu?:              EngagementPanelTitleHeaderRendererMenu;
}

export interface EngagementPanelTitleHeaderRendererMenu {
    sortFilterSubMenuRenderer?: SortFilterSubMenuRenderer;
    menuRenderer?:              CunningMenuRenderer;
}

export interface CunningMenuRenderer {
    items:          Item1[];
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
}

export interface Item1 {
    menuServiceItemRenderer: IndecentMenuServiceItemRenderer;
}

export interface IndecentMenuServiceItemRenderer {
    text:            TitleElement;
    serviceEndpoint: ServiceEndpointClass;
    trackingParams:  string;
}

export interface ServiceEndpointClass {
    clickTrackingParams:   string;
    commandMetadata:       OnUnsubscribeEndpointCommandMetadata;
    signalServiceEndpoint: CommandSignalServiceEndpoint;
}

export interface SortFilterSubMenuRenderer {
    subMenuItems:   PurpleSubMenuItem[];
    icon:           Icon;
    accessibility:  ToggledAccessibilityDataClass;
    trackingParams: string;
}

export interface PurpleSubMenuItem {
    title:           string;
    selected:        boolean;
    serviceEndpoint: ChipCloudChipRendererServiceEndpoint;
    trackingParams:  string;
}

export interface FrameworkUpdates {
    entityBatchUpdate: FrameworkUpdatesEntityBatchUpdate;
}

export interface FrameworkUpdatesEntityBatchUpdate {
    mutations: unknown[];
    timestamp: Timestamp;
}

export interface Timestamp {
    seconds: string;
    nanos:   number;
}

export interface YtInitialDataHeader {
    playlistHeaderRenderer?:   PlaylistHeaderRenderer;
    feedTabbedHeaderRenderer?: FeedTabbedHeaderRenderer;
    pageHeaderRenderer?:       PageHeaderRenderer;
}

export interface FeedTabbedHeaderRenderer {
    title: TitleElement;
}

export interface PageHeaderRenderer {
    pageTitle: PageTitle;
    content:   PageHeaderRendererContent;
}

export interface PageHeaderRendererContent {
    pageHeaderViewModel: PageHeaderViewModel;
}

export interface PageHeaderViewModel {
    title:           PageHeaderViewModelTitle;
    image:           PageHeaderViewModelImage;
    rendererContext: RendererContext;
}

export interface PageHeaderViewModelImage {
    contentPreviewImageViewModel: ContentPreviewImageViewModel;
}

export interface ContentPreviewImageViewModel {
    image:           ContentPreviewImageViewModelImage;
    style:           string;
    layoutMode:      string;
    rendererContext: RendererContext;
}

export interface ContentPreviewImageViewModelImage {
    sources: SourceElement[];
}

export interface RendererContext {
    loggingContext: RendererContextLoggingContext;
}

export interface RendererContextLoggingContext {
    loggingDirectives: LoggingContextLoggingDirectives;
}

export interface LoggingContextLoggingDirectives {
    trackingParams: string;
    visibility:     VisibilityClass;
    clientVeSpec:   ClientVeSpec;
}

export interface ClientVeSpec {
    uiType:    number;
    veCounter: number;
}

export interface PageHeaderViewModelTitle {
    dynamicTextViewModel: DynamicTextViewModel;
}

export interface DynamicTextViewModel {
    text:            BodyText;
    rendererContext: RendererContext;
}

export interface PlaylistHeaderRenderer {
    playlistId:           string;
    title:                Subtitle;
    numVideosText:        TitleElement;
    viewCountText:        Subtitle;
    shareData:            ShareData;
    isEditable:           boolean;
    privacy:              string;
    editableDetails:      EditableDetails;
    trackingParams:       string;
    serviceEndpoints:     ServiceEndpointElement[];
    flaggingAction?:      string;
    stats:                Stat[];
    briefStats:           TitleElement[];
    playlistHeaderBanner: PlaylistHeaderBanner;
    saveButton:           SaveButton;
    shareButton:          ShareButton;
    moreActionsMenu:      MoreActionsMenuClass;
    subtitle:             Subtitle;
    playButton:           PlayButtonClass;
    shufflePlayButton:    PlayButtonClass;
    cinematicContainer:   CinematicContainer;
    byline:               Byline[];
}

export interface Byline {
    playlistBylineRenderer: PlaylistBylineRenderer;
}

export interface PlaylistBylineRenderer {
    text: Stat;
}

export interface CinematicContainer {
    cinematicContainerRenderer: CinematicContainerCinematicContainerRenderer;
}

export interface CinematicContainerCinematicContainerRenderer {
    backgroundImageConfig: BackgroundImageConfig;
    gradientColorConfig:   PurpleGradientColorConfig[];
    config:                PurpleConfig;
}

export interface BackgroundImageConfig {
    thumbnail: BackgroundElement;
}

export interface PurpleConfig {
    lightThemeBackgroundColor: number;
    darkThemeBackgroundColor:  number;
    colorSourceSizeMultiplier: number;
    applyClientImageBlur:      boolean;
}

export interface PurpleGradientColorConfig {
    lightThemeColor: number;
    darkThemeColor:  number;
    startLocation:   number;
}

export interface EditableDetails {
    canDelete: boolean;
}

export interface PlaylistHeaderBanner {
    heroPlaylistThumbnailRenderer: HeroPlaylistThumbnailRenderer;
}

export interface HeroPlaylistThumbnailRenderer {
    thumbnail:         BackgroundElement;
    maxRatio:          number;
    trackingParams:    string;
    onTap:             CurrentVideoEndpoint;
    thumbnailOverlays: ThumbnailOverlays;
}

export interface ThumbnailOverlays {
    thumbnailOverlayHoverTextRenderer: ThumbnailOverlayHoverTextRendererClass;
}

export interface SaveButton {
    toggleButtonRenderer: SaveButtonToggleButtonRenderer;
}

export interface SaveButtonToggleButtonRenderer {
    style:                      ToggledStyleClass;
    size:                       SizeClass;
    isToggled:                  boolean;
    isDisabled:                 boolean;
    defaultIcon:                Icon;
    defaultServiceEndpoint?:    IndigoDefaultServiceEndpoint;
    toggledIcon:                Icon;
    toggledServiceEndpoint?:    TentacledToggledServiceEndpoint;
    trackingParams:             string;
    defaultTooltip:             string;
    toggledTooltip:             string;
    toggledStyle?:              ToggledStyleClass;
    accessibilityData:          ToggledAccessibilityDataClass;
    toggledAccessibilityData:   ToggledAccessibilityDataClass;
    defaultNavigationEndpoint?: FluffyDefaultNavigationEndpoint;
}

export interface FluffyDefaultNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     DefaultNavigationEndpointCommandMetadata;
    modalEndpoint:       TentacledModalEndpoint;
}

export interface TentacledModalEndpoint {
    modal: IndigoModal;
}

export interface IndigoModal {
    modalWithTitleAndButtonRenderer: IndigoModalWithTitleAndButtonRenderer;
}

export interface IndigoModalWithTitleAndButtonRenderer {
    title:   Subtitle;
    content: Subtitle;
    button:  StickyButton;
}

export interface StickyButton {
    buttonRenderer: BraggadociousButtonRenderer;
}

export interface BraggadociousButtonRenderer {
    style:              StyleTypeEnum;
    size:               SizeEnum;
    isDisabled:         boolean;
    text:               Subtitle;
    navigationEndpoint: FriskyNavigationEndpoint;
    trackingParams:     string;
}

export interface FriskyNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    signInEndpoint:      FluffySignInEndpoint;
}

export interface IndigoDefaultServiceEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    likeEndpoint:        StickyLikeEndpoint;
}

export interface StickyLikeEndpoint {
    status:     IconType;
    target:     TargetClass;
    likeParams: string;
}

export interface TentacledToggledServiceEndpoint {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    likeEndpoint:        IndigoLikeEndpoint;
}

export interface IndigoLikeEndpoint {
    status:           Status;
    target:           TargetClass;
    removeLikeParams: string;
}

export interface ServiceEndpointElement {
    clickTrackingParams:  string;
    commandMetadata:      ContinuationEndpointCommandMetadata;
    playlistEditEndpoint: PurplePlaylistEditEndpoint;
}

export interface PurplePlaylistEditEndpoint {
    actions: Action1[];
}

export interface Action1 {
    action:           string;
    sourcePlaylistId: string;
}

export interface ShareData {
    canShare: boolean;
}

export interface Metadata {
    playlistMetadataRenderer: PlaylistMetadataRenderer;
}

export interface PlaylistMetadataRenderer {
    title:                  string;
    androidAppindexingLink: string;
    iosAppindexingLink:     string;
}

export interface Microformat {
    microformatDataRenderer: MicroformatDataRenderer;
}

export interface MicroformatDataRenderer {
    urlCanonical:       string;
    title:              string;
    description:        string;
    thumbnail:          BackgroundElement;
    siteName:           string;
    appName:            string;
    androidPackage:     string;
    iosAppStoreId:      string;
    iosAppArguments:    string;
    ogType:             string;
    urlApplinksWeb:     string;
    urlApplinksIos:     string;
    urlApplinksAndroid: string;
    urlTwitterIos:      string;
    urlTwitterAndroid:  string;
    twitterCardType:    string;
    twitterSiteHandle:  string;
    schemaDotOrgType:   string;
    noindex:            boolean;
    unlisted:           boolean;
    linkAlternates:     LinkAlternate[];
}

export interface LinkAlternate {
    hrefUrl: string;
}

export interface OnResponseReceivedAction {
    clickTrackingParams:                      string;
    adsControlFlowOpportunityReceivedCommand: AdsControlFlowOpportunityReceivedCommand;
}

export interface AdsControlFlowOpportunityReceivedCommand {
    opportunityType:         string;
    isInitialLoad:           boolean;
    adSlotAndLayoutMetadata: AdSlotAndLayoutMetadatum[];
    enablePacfLoggingWeb:    boolean;
}

export interface AdSlotAndLayoutMetadatum {
    adSlotMetadata:   AdSlotMetadata;
    adLayoutMetadata: AdLayoutMetadat[];
}

export interface OnResponseReceivedEndpoint {
    clickTrackingParams:                       string;
    commandMetadata?:                          OnUnsubscribeEndpointCommandMetadata;
    signalServiceEndpoint?:                    CommandSignalServiceEndpoint;
    adsControlFlowOpportunityReceivedCommand?: AdsControlFlowOpportunityReceivedCommand;
    loadMarkersCommand?:                       LoadMarkersCommand;
}

export interface LoadMarkersCommand {
    visibleOnLoadKeys: string[];
    entityKeys:        string[];
}

export interface PageVisualEffect {
    cinematicContainerRenderer: PageVisualEffectCinematicContainerRenderer;
}

export interface PageVisualEffectCinematicContainerRenderer {
    gradientColorConfig: FluffyGradientColorConfig[];
    presentationStyle:   string;
    config:              FluffyConfig;
}

export interface FluffyConfig {
    lightThemeBackgroundColor:         number;
    darkThemeBackgroundColor:          number;
    animationConfig:                   AnimationConfig;
    colorSourceSizeMultiplier:         number;
    applyClientImageBlur:              boolean;
    bottomColorSourceHeightMultiplier: number;
    maxBottomColorSourceHeight:        number;
    colorSourceWidthMultiplier:        number;
    colorSourceHeightMultiplier:       number;
    blurStrength:                      number;
}

export interface AnimationConfig {
    minImageUpdateIntervalMs?: number;
    crossfadeDurationMs?:      number;
    crossfadeStartOffset:      number;
    maxFrameRate:              number;
}

export interface FluffyGradientColorConfig {
    darkThemeColor: number;
    startLocation?: number;
}

export interface PlayerOverlays {
    playerOverlayRenderer: PlayerOverlayRenderer;
}

export interface PlayerOverlayRenderer {
    endScreen:                   EndScreen;
    autoplay?:                   PlayerOverlayRendererAutoplay;
    shareButton:                 ShareButton;
    addToMenu:                   AddToMenu;
    videoDetails:                VideoDetails;
    autonavToggle?:              AutonavToggle;
    speedmasterUserEdu:          SpeedmasterUserEdu;
    decoratedPlayerBarRenderer?: PlayerOverlayRendererDecoratedPlayerBarRenderer;
}

export interface AddToMenu {
    menuRenderer: AddToMenuMenuRenderer;
}

export interface AddToMenuMenuRenderer {
    items?:         Item2[];
    trackingParams: string;
}

export interface Item2 {
    menuServiceItemRenderer: StickyMenuServiceItemRenderer;
}

export interface AutonavToggle {
    autoplaySwitchButtonRenderer: AutoplaySwitchButtonRenderer;
}

export interface AutoplaySwitchButtonRenderer {
    onEnabledCommand:          OnAbledCommand;
    onDisabledCommand:         OnAbledCommand;
    enabledAccessibilityData:  ToggledAccessibilityDataClass;
    disabledAccessibilityData: ToggledAccessibilityDataClass;
    trackingParams:            string;
    enabled:                   boolean;
}

export interface OnAbledCommand {
    clickTrackingParams: string;
    commandMetadata:     ContinuationEndpointCommandMetadata;
    setSettingEndpoint:  SetSettingEndpoint;
}

export interface SetSettingEndpoint {
    settingItemId:          string;
    boolValue:              boolean;
    settingItemIdForClient: SettingItemIDForClient;
}

export enum SettingItemIDForClient {
    AutonavForDesktop = "AUTONAV_FOR_DESKTOP",
    AutonavForSignOut = "AUTONAV_FOR_SIGN_OUT",
}

export interface PlayerOverlayRendererAutoplay {
    playerOverlayAutoplayRenderer: PlayerOverlayAutoplayRenderer;
}

export interface PlayerOverlayAutoplayRenderer {
    title:                        Subtitle;
    videoTitle:                   ShortViewCountText;
    byline:                       LongBylineText;
    pauseText:                    Subtitle;
    background:                   BackgroundElement;
    countDownSecs:                number;
    cancelButton:                 ShareButton;
    nextButton:                   VoiceSearchButtonClass;
    trackingParams:               string;
    closeButton:                  CloseButtonClass;
    thumbnailOverlays:            PlayerOverlayAutoplayRendererThumbnailOverlay[];
    preferImmediateRedirect:      boolean;
    videoId:                      string;
    publishedTimeText:            Subtitle;
    webShowNewAutonavCountdown:   boolean;
    webShowBigThumbnailEndscreen: boolean;
    shortViewCountText:           ShortViewCountText;
    countDownSecsForFullscreen:   number;
}

export interface PlayerOverlayAutoplayRendererThumbnailOverlay {
    thumbnailOverlayTimeStatusRenderer: PurpleThumbnailOverlayTimeStatusRenderer;
}

export interface PlayerOverlayRendererDecoratedPlayerBarRenderer {
    decoratedPlayerBarRenderer: DecoratedPlayerBarRendererDecoratedPlayerBarRenderer;
}

export interface DecoratedPlayerBarRendererDecoratedPlayerBarRenderer {
    playerBar:              PlayerBar;
    playerBarActionButton?: PlayerBarActionButton;
}

export interface PlayerBar {
    multiMarkersPlayerBarRenderer: MultiMarkersPlayerBarRenderer;
}

export interface MultiMarkersPlayerBarRenderer {
    visibleOnLoad:  VisibleOnLoad;
    trackingParams: string;
    markersMap?:    MarkersMap[];
}

export interface MarkersMap {
    key:   string;
    value: Value;
}

export interface Value {
    chapters:        Chapter[];
    trackingParams:  string;
    onChapterRepeat: OnChapterRepeat;
}

export interface Chapter {
    chapterRenderer: ChapterRenderer;
}

export interface ChapterRenderer {
    title:                Subtitle;
    timeRangeStartMillis: number;
    onActiveCommand:      OnActiveCommand;
    thumbnail:            BackgroundElement;
}

export interface OnActiveCommand {
    clickTrackingParams:      string;
    setActivePanelItemAction: SetActivePanelItemAction;
}

export interface SetActivePanelItemAction {
    panelTargetId: PanelIdentifierEnum;
    itemIndex:     number;
}

export interface OnChapterRepeat {
    clickTrackingParams: string;
    openPopupAction:     OnChapterRepeatOpenPopupAction;
}

export interface OnChapterRepeatOpenPopupAction {
    popup:     FriskyPopup;
    popupType: FluffyPopupType;
}

export interface FriskyPopup {
    notificationActionRenderer: TentacledNotificationActionRenderer;
}

export interface TentacledNotificationActionRenderer {
    responseText:   TitleElement;
    actionButton:   ActionButtonElement;
    trackingParams: string;
}

export interface VisibleOnLoad {
    key: string;
}

export interface PlayerBarActionButton {
    buttonRenderer: PlayerBarActionButtonButtonRenderer;
}

export interface PlayerBarActionButtonButtonRenderer {
    text:           TitleElement;
    trackingParams: string;
    command:        ShowLessCommandClass;
}

export interface EndScreen {
    watchNextEndScreenRenderer: WatchNextEndScreenRenderer;
}

export interface WatchNextEndScreenRenderer {
    results:        WatchNextEndScreenRendererResult[];
    title:          Subtitle;
    trackingParams: string;
}

export interface WatchNextEndScreenRendererResult {
    endScreenVideoRenderer?:    EndScreenVideoRenderer;
    endScreenPlaylistRenderer?: EndScreenPlaylistRenderer;
}

export interface EndScreenPlaylistRenderer {
    playlistId:         string;
    title:              Subtitle;
    thumbnail:          BackgroundElement;
    videoCount:         string;
    longBylineText:     LongBylineText;
    videoCountText:     TitleElement;
    navigationEndpoint: CurrentVideoEndpoint;
    trackingParams:     string;
}

export interface EndScreenVideoRenderer {
    videoId:            string;
    thumbnail:          BackgroundElement;
    title:              ShortViewCountText;
    shortBylineText:    LongBylineText;
    lengthText?:        ShortViewCountText;
    lengthInSeconds?:   number;
    navigationEndpoint: ReelItemRendererNavigationEndpoint;
    trackingParams:     string;
    shortViewCountText: ShortViewCountTextClass;
    publishedTimeText:  Subtitle;
    thumbnailOverlays:  EndScreenVideoRendererThumbnailOverlay[];
}

export interface EndScreenVideoRendererThumbnailOverlay {
    thumbnailOverlayTimeStatusRenderer?: FluffyThumbnailOverlayTimeStatusRenderer;
    thumbnailOverlayNowPlayingRenderer?: ThumbnailOverlayNowPlayingRendererClass;
}

export interface SpeedmasterUserEdu {
    speedmasterEduViewModel: SpeedmasterEduViewModel;
}

export interface SpeedmasterEduViewModel {
    bodyText: BodyText;
}

export interface VideoDetails {
    playerOverlayVideoDetailsRenderer: PlayerOverlayVideoDetailsRenderer;
}

export interface PlayerOverlayVideoDetailsRenderer {
    title:    Subtitle;
    subtitle: TitleElement;
}

export interface ResponseContext {
    serviceTrackingParams:           ServiceTrackingParam[];
    mainAppWebResponseContext:       MainAppWebResponseContext;
    webResponseContextExtensionData: WebResponseContextExtensionData;
    maxAgeSeconds?:                  number;
}

export interface MainAppWebResponseContext {
    datasyncId?:   string;
    loggedOut:     boolean;
    trackingParam: string;
}

export interface ServiceTrackingParam {
    service: Service;
    params:  Param[];
}

export enum Service {
    CSI = "CSI",
    Ecatcher = "ECATCHER",
    Gfeedback = "GFEEDBACK",
    GoogleHelp = "GOOGLE_HELP",
    GuidedHelp = "GUIDED_HELP",
}

export interface WebResponseContextExtensionData {
    ytConfigData:     YtConfigData;
    webPrefetchData?: WebPrefetchData;
    hasDecorated:     boolean;
}

export interface WebPrefetchData {
    navigationEndpoints: CurrentVideoEndpoint[];
}

export interface YtConfigData {
    visitorData:           string;
    sessionIndex?:         number;
    rootVisualElementType: number;
}

export interface Sidebar {
    playlistSidebarRenderer: PlaylistSidebarRenderer;
}

export interface PlaylistSidebarRenderer {
    items:          PlaylistSidebarRendererItem[];
    trackingParams: string;
}

export interface PlaylistSidebarRendererItem {
    playlistSidebarPrimaryInfoRenderer: PlaylistSidebarPrimaryInfoRenderer;
}

export interface PlaylistSidebarPrimaryInfoRenderer {
    thumbnailRenderer:  PlaylistSidebarPrimaryInfoRendererThumbnailRenderer;
    title:              PlaylistSidebarPrimaryInfoRendererTitle;
    stats:              Stat[];
    menu:               PlaylistSidebarPrimaryInfoRendererMenu;
    thumbnailOverlays:  PlaylistSidebarPrimaryInfoRendererThumbnailOverlay[];
    navigationEndpoint: CurrentVideoEndpoint;
    badges:             AdBadgeElement[];
    showMoreText:       TitleElement;
}

export interface PlaylistSidebarPrimaryInfoRendererMenu {
    menuRenderer: MagentaMenuRenderer;
}

export interface MagentaMenuRenderer {
    items:           Item3[];
    trackingParams:  string;
    topLevelButtons: StickyTopLevelButton[];
    accessibility:   ToggledAccessibilityDataClass;
}

export interface Item3 {
    menuServiceItemRenderer?:    FluffyMenuItemRenderer;
    menuNavigationItemRenderer?: MenuNavigationItemRenderer;
}

export interface MenuNavigationItemRenderer {
    text:               Subtitle;
    icon:               Icon;
    navigationEndpoint: MischievousNavigationEndpoint;
    trackingParams:     string;
}

export interface MischievousNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     DefaultNavigationEndpointCommandMetadata;
    modalEndpoint:       StickyModalEndpoint;
}

export interface StickyModalEndpoint {
    modal: IndecentModal;
}

export interface IndecentModal {
    modalWithTitleAndButtonRenderer: IndecentModalWithTitleAndButtonRenderer;
}

export interface IndecentModalWithTitleAndButtonRenderer {
    title:   Subtitle;
    content: Subtitle;
    button:  MembershipButtonClass;
}

export interface StickyTopLevelButton {
    toggleButtonRenderer?: SaveButtonToggleButtonRenderer;
    buttonRenderer?:       InformationButtonButtonRenderer;
}

export interface PlaylistSidebarPrimaryInfoRendererThumbnailOverlay {
    thumbnailOverlaySidePanelRenderer: ThumbnailOverlayHoverTextRendererClass;
}

export interface PlaylistSidebarPrimaryInfoRendererThumbnailRenderer {
    playlistCustomThumbnailRenderer: BackgroundImageConfig;
}

export interface PlaylistSidebarPrimaryInfoRendererTitle {
    runs: FluffyRun[];
}

export interface FluffyRun {
    text:               string;
    navigationEndpoint: CurrentVideoEndpoint;
}

export interface Topbar {
    desktopTopbarRenderer: DesktopTopbarRenderer;
}

export interface DesktopTopbarRenderer {
    logo:                     Logo;
    searchbox:                Searchbox;
    trackingParams:           string;
    topbarButtons:            TopbarButton[];
    hotkeyDialog:             HotkeyDialog;
    backButton:               BackButtonClass;
    forwardButton:            BackButtonClass;
    a11ySkipNavigationButton: A11YSkipNavigationButtonClass;
    voiceSearchButton?:       VoiceSearchButtonClass;
}

export interface BackButtonClass {
    buttonRenderer: BackButtonButtonRenderer;
}

export interface BackButtonButtonRenderer {
    trackingParams: string;
    command:        ServiceEndpointClass;
}

export interface HotkeyDialog {
    hotkeyDialogRenderer: HotkeyDialogRenderer;
}

export interface HotkeyDialogRenderer {
    title:          TitleElement;
    sections:       HotkeyDialogRendererSection[];
    dismissButton:  A11YSkipNavigationButtonClass;
    trackingParams: string;
}

export interface HotkeyDialogRendererSection {
    hotkeyDialogSectionRenderer: HotkeyDialogSectionRenderer;
}

export interface HotkeyDialogSectionRenderer {
    title:   TitleElement;
    options: Option[];
}

export interface Option {
    hotkeyDialogSectionOptionRenderer: HotkeyDialogSectionOptionRenderer;
}

export interface HotkeyDialogSectionOptionRenderer {
    label:                     TitleElement;
    hotkey:                    string;
    hotkeyAccessibilityLabel?: ToggledAccessibilityDataClass;
}

export interface Logo {
    topbarLogoRenderer: TopbarLogoRenderer;
}

export interface TopbarLogoRenderer {
    iconImage:         Icon;
    tooltipText:       TitleElement;
    endpoint:          InnertubeCommandClass;
    trackingParams:    string;
    overrideEntityKey: string;
}

export interface Searchbox {
    fusionSearchboxRenderer: FusionSearchboxRenderer;
}

export interface FusionSearchboxRenderer {
    icon:            Icon;
    placeholderText: TitleElement;
    config:          FusionSearchboxRendererConfig;
    trackingParams:  string;
    searchEndpoint:  FusionSearchboxRendererSearchEndpoint;
    clearButton:     VoiceSearchButtonClass;
}

export interface FusionSearchboxRendererConfig {
    webSearchboxConfig: WebSearchboxConfig;
}

export interface WebSearchboxConfig {
    requestLanguage:     string;
    requestDomain:       string;
    hasOnscreenKeyboard: boolean;
    focusSearchbox:      boolean;
}

export interface FusionSearchboxRendererSearchEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    searchEndpoint:      SearchEndpointSearchEndpoint;
}

export interface SearchEndpointSearchEndpoint {
    query: string;
}

export interface TopbarButton {
    topbarMenuButtonRenderer?:         TopbarMenuButtonRenderer;
    notificationTopbarButtonRenderer?: NotificationTopbarButtonRenderer;
    buttonRenderer?:                   TopbarButtonButtonRenderer;
}

export interface TopbarButtonButtonRenderer {
    style:              FluffyStyle;
    size:               string;
    text:               TitleElement;
    icon:               Icon;
    navigationEndpoint: BraggadociousNavigationEndpoint;
    trackingParams:     string;
    targetId:           string;
}

export interface BraggadociousNavigationEndpoint {
    clickTrackingParams: string;
    commandMetadata:     InlinePlaybackEndpointCommandMetadata;
    signInEndpoint:      IndigoSignInEndpoint;
}

export interface IndigoSignInEndpoint {
    idamTag: string;
}

export interface NotificationTopbarButtonRenderer {
    icon:                      Icon;
    menuRequest:               MenuRequest;
    style:                     string;
    trackingParams:            string;
    accessibility:             ToggledAccessibilityDataClass;
    tooltip:                   string;
    updateUnseenCountEndpoint: UpdateUnseenCountEndpoint;
    notificationCount:         number;
    handlerDatas:              string[];
}

export interface MenuRequest {
    clickTrackingParams:   string;
    commandMetadata:       ContinuationEndpointCommandMetadata;
    signalServiceEndpoint: MenuRequestSignalServiceEndpoint;
}

export interface MenuRequestSignalServiceEndpoint {
    signal:  FluffySignal;
    actions: Action2[];
}

export interface Action2 {
    clickTrackingParams: string;
    openPopupAction:     CunningOpenPopupAction;
}

export interface CunningOpenPopupAction {
    popup:     MischievousPopup;
    popupType: TentacledPopupType;
    beReused:  boolean;
}

export interface MischievousPopup {
    multiPageMenuRenderer: PopupMultiPageMenuRenderer;
}

export interface PopupMultiPageMenuRenderer {
    trackingParams:     string;
    style:              MultiPageMenuRendererStyle;
    showLoadingSpinner: boolean;
}

export enum MultiPageMenuRendererStyle {
    MultiPageMenuStyleTypeAccount = "MULTI_PAGE_MENU_STYLE_TYPE_ACCOUNT",
    MultiPageMenuStyleTypeNotifications = "MULTI_PAGE_MENU_STYLE_TYPE_NOTIFICATIONS",
    MultiPageMenuStyleTypeSystem = "MULTI_PAGE_MENU_STYLE_TYPE_SYSTEM",
}

export enum FluffySignal {
    GetAccountMenu = "GET_ACCOUNT_MENU",
    GetNotificationsMenu = "GET_NOTIFICATIONS_MENU",
}

export interface UpdateUnseenCountEndpoint {
    clickTrackingParams:   string;
    commandMetadata:       ContinuationEndpointCommandMetadata;
    signalServiceEndpoint: Signal;
}

export interface TopbarMenuButtonRenderer {
    icon?:          Icon;
    menuRenderer?:  TopbarMenuButtonRendererMenuRenderer;
    trackingParams: string;
    accessibility:  ToggledAccessibilityDataClass;
    tooltip:        TopbarMenuButtonRendererTooltip;
    style?:         StyleTypeEnum;
    avatar?:        Avatar;
    menuRequest?:   MenuRequest;
}

export interface TopbarMenuButtonRendererMenuRenderer {
    multiPageMenuRenderer: MenuRendererMultiPageMenuRenderer;
}

export interface MenuRendererMultiPageMenuRenderer {
    sections:       MultiPageMenuRendererSection[];
    trackingParams: string;
    style:          string;
}

export interface MultiPageMenuRendererSection {
    multiPageMenuSectionRenderer: MultiPageMenuSectionRenderer;
}

export interface MultiPageMenuSectionRenderer {
    items:          MultiPageMenuSectionRendererItem[];
    trackingParams: string;
}

export interface MultiPageMenuSectionRendererItem {
    compactLinkRenderer: CompactLinkRenderer;
}

export interface CompactLinkRenderer {
    icon:               Icon;
    title:              TitleElement;
    navigationEndpoint: CompactLinkRendererNavigationEndpoint;
    trackingParams:     string;
    style:              CompactLinkRendererStyle;
}

export interface CompactLinkRendererNavigationEndpoint {
    clickTrackingParams:       string;
    commandMetadata:           InlinePlaybackEndpointCommandMetadata;
    uploadEndpoint?:           AdsEngagementPanelContentRenderer;
    signalNavigationEndpoint?: Signal;
    browseEndpoint?:           CommandBrowseEndpoint;
}

export enum CompactLinkRendererStyle {
    CompactLinkStyleTypeCreationMenu = "COMPACT_LINK_STYLE_TYPE_CREATION_MENU",
}

export enum TopbarMenuButtonRendererTooltip {
    AccountMenu = "Account menu",
    Create = "Create",
    Settings = "Settings",
}
